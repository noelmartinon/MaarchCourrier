import { MaxPipe } from './max';
import { PercentagePipe } from './percentage';
import { BytesPipe } from './bytes';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './max';
import * as ɵngcc2 from './min';
import * as ɵngcc3 from './percentage';
import * as ɵngcc4 from './sum';
import * as ɵngcc5 from './floor';
import * as ɵngcc6 from './round';
import * as ɵngcc7 from './sqrt';
import * as ɵngcc8 from './pow';
import * as ɵngcc9 from './ceil';
import * as ɵngcc10 from './degrees';
import * as ɵngcc11 from './bytes';
import * as ɵngcc12 from './radians';
export declare const MATH_PIPES: (typeof MaxPipe | typeof PercentagePipe | typeof BytesPipe)[];
export declare class NgMathPipesModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NgMathPipesModule, [typeof ɵngcc1.MaxPipe, typeof ɵngcc2.MinPipe, typeof ɵngcc3.PercentagePipe, typeof ɵngcc4.SumPipe, typeof ɵngcc5.FloorPipe, typeof ɵngcc6.RoundPipe, typeof ɵngcc7.SqrtPipe, typeof ɵngcc8.PowerPipe, typeof ɵngcc9.CeilPipe, typeof ɵngcc10.DegreesPipe, typeof ɵngcc11.BytesPipe, typeof ɵngcc12.RadiansPipe], never, [typeof ɵngcc1.MaxPipe, typeof ɵngcc2.MinPipe, typeof ɵngcc3.PercentagePipe, typeof ɵngcc4.SumPipe, typeof ɵngcc5.FloorPipe, typeof ɵngcc6.RoundPipe, typeof ɵngcc7.SqrtPipe, typeof ɵngcc8.PowerPipe, typeof ɵngcc9.CeilPipe, typeof ɵngcc10.DegreesPipe, typeof ɵngcc11.BytesPipe, typeof ɵngcc12.RadiansPipe]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<NgMathPipesModule>;
}
export { MaxPipe } from './max';
export { MinPipe } from './min';
export { PercentagePipe } from './percentage';
export { SumPipe } from './sum';
export { FloorPipe } from './floor';
export { RoundPipe } from './round';
export { SqrtPipe } from './sqrt';
export { PowerPipe } from './pow';
export { CeilPipe } from './ceil';
export { DegreesPipe } from './degrees';
export { BytesPipe } from './bytes';
export { RadiansPipe } from './radians';

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXhQaXBlIH0gZnJvbSAnLi9tYXgnO1xuaW1wb3J0IHsgUGVyY2VudGFnZVBpcGUgfSBmcm9tICcuL3BlcmNlbnRhZ2UnO1xuaW1wb3J0IHsgQnl0ZXNQaXBlIH0gZnJvbSAnLi9ieXRlcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBNQVRIX1BJUEVTOiAodHlwZW9mIE1heFBpcGUgfCB0eXBlb2YgUGVyY2VudGFnZVBpcGUgfCB0eXBlb2YgQnl0ZXNQaXBlKVtdO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdNYXRoUGlwZXNNb2R1bGUge1xufVxuZXhwb3J0IHsgTWF4UGlwZSB9IGZyb20gJy4vbWF4JztcbmV4cG9ydCB7IE1pblBpcGUgfSBmcm9tICcuL21pbic7XG5leHBvcnQgeyBQZXJjZW50YWdlUGlwZSB9IGZyb20gJy4vcGVyY2VudGFnZSc7XG5leHBvcnQgeyBTdW1QaXBlIH0gZnJvbSAnLi9zdW0nO1xuZXhwb3J0IHsgRmxvb3JQaXBlIH0gZnJvbSAnLi9mbG9vcic7XG5leHBvcnQgeyBSb3VuZFBpcGUgfSBmcm9tICcuL3JvdW5kJztcbmV4cG9ydCB7IFNxcnRQaXBlIH0gZnJvbSAnLi9zcXJ0JztcbmV4cG9ydCB7IFBvd2VyUGlwZSB9IGZyb20gJy4vcG93JztcbmV4cG9ydCB7IENlaWxQaXBlIH0gZnJvbSAnLi9jZWlsJztcbmV4cG9ydCB7IERlZ3JlZXNQaXBlIH0gZnJvbSAnLi9kZWdyZWVzJztcbmV4cG9ydCB7IEJ5dGVzUGlwZSB9IGZyb20gJy4vYnl0ZXMnO1xuZXhwb3J0IHsgUmFkaWFuc1BpcGUgfSBmcm9tICcuL3JhZGlhbnMnO1xuIl19