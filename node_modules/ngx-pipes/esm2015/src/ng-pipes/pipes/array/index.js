import { DiffPipe } from './diff';
import { InitialPipe } from './initial';
import { FlattenPipe } from './flatten';
import { IntersectionPipe } from './intersection';
import { ReversePipe } from './reverse';
import { TailPipe } from './tail';
import { TrurthifyPipe } from './truthify';
import { UnionPipe } from './union';
import { UniquePipe } from './unique';
import { WithoutPipe } from './without';
import { PluckPipe } from './pluck';
import { ShufflePipe } from './shuffle';
import { EveryPipe } from './every';
import { SomePipe } from './some';
import { SamplePipe } from './sample';
import { GroupByPipe } from './group-by';
import { FilterByPipe } from './filter-by';
import { OrderByPipe } from './order-by';
import { NgModule } from '@angular/core';
import { GroupByImpurePipe } from './group-by-impure';
import { FilterByImpurePipe } from './filter-by-impure';
import { OrderByImpurePipe } from './order-by-impure';
import { RangePipe } from './range';
import { ChunkPipe } from './chunk';
import { FromPairsPipe } from './from-pairs';
const ARRAY_PIPES = [
    DiffPipe,
    FlattenPipe,
    InitialPipe,
    IntersectionPipe,
    ReversePipe,
    TailPipe,
    TrurthifyPipe,
    UnionPipe,
    UniquePipe,
    WithoutPipe,
    PluckPipe,
    ShufflePipe,
    EveryPipe,
    SomePipe,
    SamplePipe,
    GroupByPipe,
    GroupByImpurePipe,
    FilterByPipe,
    FilterByImpurePipe,
    OrderByPipe,
    OrderByImpurePipe,
    RangePipe,
    ChunkPipe,
    FromPairsPipe
];
export class NgArrayPipesModule {
}
NgArrayPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: ARRAY_PIPES,
                imports: [],
                exports: ARRAY_PIPES,
            },] }
];
export { DiffPipe } from './diff';
export { InitialPipe } from './initial';
export { FlattenPipe } from './flatten';
export { IntersectionPipe } from './intersection';
export { ReversePipe } from './reverse';
export { TailPipe } from './tail';
export { TrurthifyPipe } from './truthify';
export { UnionPipe } from './union';
export { UniquePipe } from './unique';
export { WithoutPipe } from './without';
export { PluckPipe } from './pluck';
export { ShufflePipe } from './shuffle';
export { EveryPipe } from './every';
export { SomePipe } from './some';
export { SamplePipe } from './sample';
export { GroupByPipe } from './group-by';
export { FilterByPipe } from './filter-by';
export { OrderByPipe } from './order-by';
export { GroupByImpurePipe } from './group-by-impure';
export { FilterByImpurePipe } from './filter-by-impure';
export { OrderByImpurePipe } from './order-by-impure';
export { RangePipe } from './range';
export { ChunkPipe } from './chunk';
export { FromPairsPipe } from './from-pairs';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvYXJyYXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFN0MsTUFBTSxXQUFXLEdBQUc7SUFDbEIsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsZ0JBQWdCO0lBQ2hCLFdBQVc7SUFDWCxRQUFRO0lBQ1IsYUFBYTtJQUNiLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLGlCQUFpQjtJQUNqQixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsU0FBUztJQUNULFNBQVM7SUFDVCxhQUFhO0NBQ2QsQ0FBQztBQU9GLE1BQU0sT0FBTyxrQkFBa0I7OztZQUw5QixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLFdBQVc7Z0JBQ3pCLE9BQU8sRUFBRSxFQUFFO2dCQUNYLE9BQU8sRUFBRSxXQUFXO2FBQ3JCOztBQUdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpZmZQaXBlIH0gZnJvbSAnLi9kaWZmJztcbmltcG9ydCB7IEluaXRpYWxQaXBlIH0gZnJvbSAnLi9pbml0aWFsJztcbmltcG9ydCB7IEZsYXR0ZW5QaXBlIH0gZnJvbSAnLi9mbGF0dGVuJztcbmltcG9ydCB7IEludGVyc2VjdGlvblBpcGUgfSBmcm9tICcuL2ludGVyc2VjdGlvbic7XG5pbXBvcnQgeyBSZXZlcnNlUGlwZSB9IGZyb20gJy4vcmV2ZXJzZSc7XG5pbXBvcnQgeyBUYWlsUGlwZSB9IGZyb20gJy4vdGFpbCc7XG5pbXBvcnQgeyBUcnVydGhpZnlQaXBlIH0gZnJvbSAnLi90cnV0aGlmeSc7XG5pbXBvcnQgeyBVbmlvblBpcGUgfSBmcm9tICcuL3VuaW9uJztcbmltcG9ydCB7IFVuaXF1ZVBpcGUgfSBmcm9tICcuL3VuaXF1ZSc7XG5pbXBvcnQgeyBXaXRob3V0UGlwZSB9IGZyb20gJy4vd2l0aG91dCc7XG5pbXBvcnQgeyBQbHVja1BpcGUgfSBmcm9tICcuL3BsdWNrJztcbmltcG9ydCB7IFNodWZmbGVQaXBlIH0gZnJvbSAnLi9zaHVmZmxlJztcbmltcG9ydCB7IEV2ZXJ5UGlwZSB9IGZyb20gJy4vZXZlcnknO1xuaW1wb3J0IHsgU29tZVBpcGUgfSBmcm9tICcuL3NvbWUnO1xuaW1wb3J0IHsgU2FtcGxlUGlwZSB9IGZyb20gJy4vc2FtcGxlJztcbmltcG9ydCB7IEdyb3VwQnlQaXBlIH0gZnJvbSAnLi9ncm91cC1ieSc7XG5pbXBvcnQgeyBGaWx0ZXJCeVBpcGUgfSBmcm9tICcuL2ZpbHRlci1ieSc7XG5pbXBvcnQgeyBPcmRlckJ5UGlwZSB9IGZyb20gJy4vb3JkZXItYnknO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyb3VwQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9ncm91cC1ieS1pbXB1cmUnO1xuaW1wb3J0IHsgRmlsdGVyQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9maWx0ZXItYnktaW1wdXJlJztcbmltcG9ydCB7IE9yZGVyQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9vcmRlci1ieS1pbXB1cmUnO1xuaW1wb3J0IHsgUmFuZ2VQaXBlIH0gZnJvbSAnLi9yYW5nZSc7XG5pbXBvcnQgeyBDaHVua1BpcGUgfSBmcm9tICcuL2NodW5rJztcbmltcG9ydCB7IEZyb21QYWlyc1BpcGUgfSBmcm9tICcuL2Zyb20tcGFpcnMnO1xuXG5jb25zdCBBUlJBWV9QSVBFUyA9IFtcbiAgRGlmZlBpcGUsXG4gIEZsYXR0ZW5QaXBlLFxuICBJbml0aWFsUGlwZSxcbiAgSW50ZXJzZWN0aW9uUGlwZSxcbiAgUmV2ZXJzZVBpcGUsXG4gIFRhaWxQaXBlLFxuICBUcnVydGhpZnlQaXBlLFxuICBVbmlvblBpcGUsXG4gIFVuaXF1ZVBpcGUsXG4gIFdpdGhvdXRQaXBlLFxuICBQbHVja1BpcGUsXG4gIFNodWZmbGVQaXBlLFxuICBFdmVyeVBpcGUsXG4gIFNvbWVQaXBlLFxuICBTYW1wbGVQaXBlLFxuICBHcm91cEJ5UGlwZSxcbiAgR3JvdXBCeUltcHVyZVBpcGUsXG4gIEZpbHRlckJ5UGlwZSxcbiAgRmlsdGVyQnlJbXB1cmVQaXBlLFxuICBPcmRlckJ5UGlwZSxcbiAgT3JkZXJCeUltcHVyZVBpcGUsXG4gIFJhbmdlUGlwZSxcbiAgQ2h1bmtQaXBlLFxuICBGcm9tUGFpcnNQaXBlXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IEFSUkFZX1BJUEVTLFxuICBpbXBvcnRzOiBbXSxcbiAgZXhwb3J0czogQVJSQVlfUElQRVMsXG59KVxuZXhwb3J0IGNsYXNzIE5nQXJyYXlQaXBlc01vZHVsZSB7fVxuXG5leHBvcnQgeyBEaWZmUGlwZSB9IGZyb20gJy4vZGlmZic7XG5leHBvcnQgeyBJbml0aWFsUGlwZSB9IGZyb20gJy4vaW5pdGlhbCc7XG5leHBvcnQgeyBGbGF0dGVuUGlwZSB9IGZyb20gJy4vZmxhdHRlbic7XG5leHBvcnQgeyBJbnRlcnNlY3Rpb25QaXBlIH0gZnJvbSAnLi9pbnRlcnNlY3Rpb24nO1xuZXhwb3J0IHsgUmV2ZXJzZVBpcGUgfSBmcm9tICcuL3JldmVyc2UnO1xuZXhwb3J0IHsgVGFpbFBpcGUgfSBmcm9tICcuL3RhaWwnO1xuZXhwb3J0IHsgVHJ1cnRoaWZ5UGlwZSB9IGZyb20gJy4vdHJ1dGhpZnknO1xuZXhwb3J0IHsgVW5pb25QaXBlIH0gZnJvbSAnLi91bmlvbic7XG5leHBvcnQgeyBVbmlxdWVQaXBlIH0gZnJvbSAnLi91bmlxdWUnO1xuZXhwb3J0IHsgV2l0aG91dFBpcGUgfSBmcm9tICcuL3dpdGhvdXQnO1xuZXhwb3J0IHsgUGx1Y2tQaXBlIH0gZnJvbSAnLi9wbHVjayc7XG5leHBvcnQgeyBTaHVmZmxlUGlwZSB9IGZyb20gJy4vc2h1ZmZsZSc7XG5leHBvcnQgeyBFdmVyeVBpcGUgfSBmcm9tICcuL2V2ZXJ5JztcbmV4cG9ydCB7IFNvbWVQaXBlIH0gZnJvbSAnLi9zb21lJztcbmV4cG9ydCB7IFNhbXBsZVBpcGUgfSBmcm9tICcuL3NhbXBsZSc7XG5leHBvcnQgeyBHcm91cEJ5UGlwZSB9IGZyb20gJy4vZ3JvdXAtYnknO1xuZXhwb3J0IHsgRmlsdGVyQnlQaXBlIH0gZnJvbSAnLi9maWx0ZXItYnknO1xuZXhwb3J0IHsgT3JkZXJCeVBpcGUgfSBmcm9tICcuL29yZGVyLWJ5JztcbmV4cG9ydCB7IEdyb3VwQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9ncm91cC1ieS1pbXB1cmUnO1xuZXhwb3J0IHsgRmlsdGVyQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9maWx0ZXItYnktaW1wdXJlJztcbmV4cG9ydCB7IE9yZGVyQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9vcmRlci1ieS1pbXB1cmUnO1xuZXhwb3J0IHsgUmFuZ2VQaXBlIH0gZnJvbSAnLi9yYW5nZSc7XG5leHBvcnQgeyBDaHVua1BpcGUgfSBmcm9tICcuL2NodW5rJztcbmV4cG9ydCB7IEZyb21QYWlyc1BpcGUgfSBmcm9tICcuL2Zyb20tcGFpcnMnO1xuIl19