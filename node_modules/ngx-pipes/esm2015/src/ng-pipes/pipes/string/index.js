import { NgModule } from '@angular/core';
import { AorAnPipe } from './a-or-an';
import { UcWordsPipe } from './ucwords';
import { LeftTrimPipe } from './ltrim';
import { RepeatPipe } from './repeat';
import { RightTrimPipe } from './rtrim';
import { ScanPipe } from './scan';
import { ShortenPipe } from './shorten';
import { StripTagsPipe } from './strip-tags';
import { TrimPipe } from './trim';
import { UcFirstPipe } from './ucfirst';
import { SlugifyPipe } from './slugify';
import { CamelizePipe } from './camelize';
import { LatinisePipe } from './latinise';
import { LinesPipe } from './lines';
import { UnderscorePipe } from './underscore';
import { MatchPipe } from './match';
import { TestPipe } from './test';
import { LeftPadPipe } from './lpad';
import { RightPadPipe } from './rpad';
import { MakePluralStringPipe } from './pluralize';
import { WrapPipe } from './wrap';
export const STRING_PIPES = [
    AorAnPipe,
    LeftTrimPipe,
    RepeatPipe,
    RightTrimPipe,
    ScanPipe,
    ShortenPipe,
    StripTagsPipe,
    TrimPipe,
    UcFirstPipe,
    UcWordsPipe,
    SlugifyPipe,
    CamelizePipe,
    LatinisePipe,
    LinesPipe,
    UnderscorePipe,
    MatchPipe,
    TestPipe,
    LeftPadPipe,
    RightPadPipe,
    MakePluralStringPipe,
    WrapPipe,
];
export class NgStringPipesModule {
}
NgStringPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: STRING_PIPES,
                imports: [],
                exports: STRING_PIPES,
            },] }
];
export { AorAnPipe } from './a-or-an';
export { UcWordsPipe } from './ucwords';
export { LeftTrimPipe } from './ltrim';
export { RepeatPipe } from './repeat';
export { RightTrimPipe } from './rtrim';
export { ScanPipe } from './scan';
export { ShortenPipe } from './shorten';
export { StripTagsPipe } from './strip-tags';
export { TrimPipe } from './trim';
export { UcFirstPipe } from './ucfirst';
export { SlugifyPipe } from './slugify';
export { CamelizePipe } from './camelize';
export { LatinisePipe } from './latinise';
export { LinesPipe } from './lines';
export { UnderscorePipe } from './underscore';
export { MatchPipe } from './match';
export { TestPipe } from './test';
export { LeftPadPipe } from './lpad';
export { RightPadPipe } from './rpad';
export { MakePluralStringPipe } from './pluralize';
export { WrapPipe } from './wrap';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvc3RyaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUN0QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVsQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUc7SUFDMUIsU0FBUztJQUNULFlBQVk7SUFDWixVQUFVO0lBQ1YsYUFBYTtJQUNiLFFBQVE7SUFDUixXQUFXO0lBQ1gsYUFBYTtJQUNiLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxZQUFZO0lBQ1osWUFBWTtJQUNaLFNBQVM7SUFDVCxjQUFjO0lBQ2QsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsWUFBWTtJQUNaLG9CQUFvQjtJQUNwQixRQUFRO0NBQ1QsQ0FBQztBQU9GLE1BQU0sT0FBTyxtQkFBbUI7OztZQUwvQixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLE9BQU8sRUFBRSxFQUFFO2dCQUNYLE9BQU8sRUFBRSxZQUFZO2FBQ3RCOztBQUdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW9yQW5QaXBlIH0gZnJvbSAnLi9hLW9yLWFuJztcbmltcG9ydCB7IFVjV29yZHNQaXBlIH0gZnJvbSAnLi91Y3dvcmRzJztcbmltcG9ydCB7IExlZnRUcmltUGlwZSB9IGZyb20gJy4vbHRyaW0nO1xuaW1wb3J0IHsgUmVwZWF0UGlwZSB9IGZyb20gJy4vcmVwZWF0JztcbmltcG9ydCB7IFJpZ2h0VHJpbVBpcGUgfSBmcm9tICcuL3J0cmltJztcbmltcG9ydCB7IFNjYW5QaXBlIH0gZnJvbSAnLi9zY2FuJztcbmltcG9ydCB7IFNob3J0ZW5QaXBlIH0gZnJvbSAnLi9zaG9ydGVuJztcbmltcG9ydCB7IFN0cmlwVGFnc1BpcGUgfSBmcm9tICcuL3N0cmlwLXRhZ3MnO1xuaW1wb3J0IHsgVHJpbVBpcGUgfSBmcm9tICcuL3RyaW0nO1xuaW1wb3J0IHsgVWNGaXJzdFBpcGUgfSBmcm9tICcuL3VjZmlyc3QnO1xuaW1wb3J0IHsgU2x1Z2lmeVBpcGUgfSBmcm9tICcuL3NsdWdpZnknO1xuaW1wb3J0IHsgQ2FtZWxpemVQaXBlIH0gZnJvbSAnLi9jYW1lbGl6ZSc7XG5pbXBvcnQgeyBMYXRpbmlzZVBpcGUgfSBmcm9tICcuL2xhdGluaXNlJztcbmltcG9ydCB7IExpbmVzUGlwZSB9IGZyb20gJy4vbGluZXMnO1xuaW1wb3J0IHsgVW5kZXJzY29yZVBpcGUgfSBmcm9tICcuL3VuZGVyc2NvcmUnO1xuaW1wb3J0IHsgTWF0Y2hQaXBlIH0gZnJvbSAnLi9tYXRjaCc7XG5pbXBvcnQgeyBUZXN0UGlwZSB9IGZyb20gJy4vdGVzdCc7XG5pbXBvcnQgeyBMZWZ0UGFkUGlwZSB9IGZyb20gJy4vbHBhZCc7XG5pbXBvcnQgeyBSaWdodFBhZFBpcGUgfSBmcm9tICcuL3JwYWQnO1xuaW1wb3J0IHsgTWFrZVBsdXJhbFN0cmluZ1BpcGUgfSBmcm9tICcuL3BsdXJhbGl6ZSc7XG5pbXBvcnQgeyBXcmFwUGlwZSB9IGZyb20gJy4vd3JhcCc7XG5cbmV4cG9ydCBjb25zdCBTVFJJTkdfUElQRVMgPSBbXG4gIEFvckFuUGlwZSxcbiAgTGVmdFRyaW1QaXBlLFxuICBSZXBlYXRQaXBlLFxuICBSaWdodFRyaW1QaXBlLFxuICBTY2FuUGlwZSxcbiAgU2hvcnRlblBpcGUsXG4gIFN0cmlwVGFnc1BpcGUsXG4gIFRyaW1QaXBlLFxuICBVY0ZpcnN0UGlwZSxcbiAgVWNXb3Jkc1BpcGUsXG4gIFNsdWdpZnlQaXBlLFxuICBDYW1lbGl6ZVBpcGUsXG4gIExhdGluaXNlUGlwZSxcbiAgTGluZXNQaXBlLFxuICBVbmRlcnNjb3JlUGlwZSxcbiAgTWF0Y2hQaXBlLFxuICBUZXN0UGlwZSxcbiAgTGVmdFBhZFBpcGUsXG4gIFJpZ2h0UGFkUGlwZSxcbiAgTWFrZVBsdXJhbFN0cmluZ1BpcGUsXG4gIFdyYXBQaXBlLFxuXTtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBTVFJJTkdfUElQRVMsXG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBTVFJJTkdfUElQRVMsXG59KVxuZXhwb3J0IGNsYXNzIE5nU3RyaW5nUGlwZXNNb2R1bGUge31cblxuZXhwb3J0IHsgQW9yQW5QaXBlIH0gZnJvbSAnLi9hLW9yLWFuJztcbmV4cG9ydCB7IFVjV29yZHNQaXBlIH0gZnJvbSAnLi91Y3dvcmRzJztcbmV4cG9ydCB7IExlZnRUcmltUGlwZSB9IGZyb20gJy4vbHRyaW0nO1xuZXhwb3J0IHsgUmVwZWF0UGlwZSB9IGZyb20gJy4vcmVwZWF0JztcbmV4cG9ydCB7IFJpZ2h0VHJpbVBpcGUgfSBmcm9tICcuL3J0cmltJztcbmV4cG9ydCB7IFNjYW5QaXBlIH0gZnJvbSAnLi9zY2FuJztcbmV4cG9ydCB7IFNob3J0ZW5QaXBlIH0gZnJvbSAnLi9zaG9ydGVuJztcbmV4cG9ydCB7IFN0cmlwVGFnc1BpcGUgfSBmcm9tICcuL3N0cmlwLXRhZ3MnO1xuZXhwb3J0IHsgVHJpbVBpcGUgfSBmcm9tICcuL3RyaW0nO1xuZXhwb3J0IHsgVWNGaXJzdFBpcGUgfSBmcm9tICcuL3VjZmlyc3QnO1xuZXhwb3J0IHsgU2x1Z2lmeVBpcGUgfSBmcm9tICcuL3NsdWdpZnknO1xuZXhwb3J0IHsgQ2FtZWxpemVQaXBlIH0gZnJvbSAnLi9jYW1lbGl6ZSc7XG5leHBvcnQgeyBMYXRpbmlzZVBpcGUgfSBmcm9tICcuL2xhdGluaXNlJztcbmV4cG9ydCB7IExpbmVzUGlwZSB9IGZyb20gJy4vbGluZXMnO1xuZXhwb3J0IHsgVW5kZXJzY29yZVBpcGUgfSBmcm9tICcuL3VuZGVyc2NvcmUnO1xuZXhwb3J0IHsgTWF0Y2hQaXBlIH0gZnJvbSAnLi9tYXRjaCc7XG5leHBvcnQgeyBUZXN0UGlwZSB9IGZyb20gJy4vdGVzdCc7XG5leHBvcnQgeyBMZWZ0UGFkUGlwZSB9IGZyb20gJy4vbHBhZCc7XG5leHBvcnQgeyBSaWdodFBhZFBpcGUgfSBmcm9tICcuL3JwYWQnO1xuZXhwb3J0IHsgTWFrZVBsdXJhbFN0cmluZ1BpcGUgfSBmcm9tICcuL3BsdXJhbGl6ZSc7XG5leHBvcnQgeyBXcmFwUGlwZSB9IGZyb20gJy4vd3JhcCc7XG4iXX0=