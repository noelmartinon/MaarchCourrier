import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
var TimeAgoPipe = /** @class */ (function () {
    function TimeAgoPipe() {
    }
    TimeAgoPipe_1 = TimeAgoPipe;
    /**
     * @param inputDate: Date | Moment - not included as TypeScript interface,
     * in order to keep `ngx-pipes` "pure" from dependencies!
     */
    TimeAgoPipe.prototype.transform = function (inputDate) {
        if (!inputDate || (!inputDate.getTime && !inputDate.toDate)) {
            return 'Invalid date';
        }
        var past = inputDate.toDate ? inputDate.toDate() : inputDate.getTime();
        var now = +new Date();
        if (past > now) {
            return 'in the future';
        }
        for (var i = 0, l = TimeAgoPipe_1.MAPPER.length, ms = now - past, div = TimeAgoPipe_1.YEAR_MS; i < l; ++i) {
            var elm = TimeAgoPipe_1.MAPPER[i];
            var unit = Math.floor(ms / (div /= elm.div));
            if (unit >= 1) {
                return unit === 1 ? elm.single : unit + " " + elm.many + " ago";
            }
        }
        return 'just now';
    };
    var TimeAgoPipe_1;
    TimeAgoPipe.YEAR_MS = 1000 * 60 * 60 * 24 * 7 * 4 * 12;
    TimeAgoPipe.MAPPER = [
        { single: 'last year', many: 'years', div: 1 },
        { single: 'last month', many: 'months', div: 12 },
        { single: 'last week', many: 'weeks', div: 4 },
        { single: 'yesterday', many: 'days', div: 7 },
        { single: 'an hour ago', many: 'hours', div: 24 },
        { single: 'just now', many: 'minutes', div: 60 },
    ];
    TimeAgoPipe = TimeAgoPipe_1 = __decorate([
        Pipe({ name: 'timeAgo' })
    ], TimeAgoPipe);
    return TimeAgoPipe;
}());
export { TimeAgoPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvbmctcGlwZXMvcGlwZXMvZGF0ZS90aW1lLWFnby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFHcEQ7SUFBQTtJQXNDQSxDQUFDO29CQXRDWSxXQUFXO0lBV3RCOzs7T0FHRztJQUNJLCtCQUFTLEdBQWhCLFVBQWlCLFNBQWM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzRCxPQUFPLGNBQWMsQ0FBQztTQUN2QjtRQUVELElBQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3pFLElBQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV4QixJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLGVBQWUsQ0FBQztTQUN4QjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsYUFBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JHLElBQU0sR0FBRyxHQUFHLGFBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFL0MsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO2dCQUNiLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUksSUFBSSxTQUFJLEdBQUcsQ0FBQyxJQUFJLFNBQU0sQ0FBQzthQUM1RDtTQUNGO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7SUFwQ2MsbUJBQU8sR0FBVyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbkQsa0JBQU0sR0FBUTtRQUMzQixFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQzlDLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDakQsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtRQUM5QyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQzdDLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDakQsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtLQUNqRCxDQUFDO0lBVFMsV0FBVztRQUR2QixJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7T0FDYixXQUFXLENBc0N2QjtJQUFELGtCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0F0Q1ksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQFBpcGUoeyBuYW1lOiAndGltZUFnbycgfSlcbmV4cG9ydCBjbGFzcyBUaW1lQWdvUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBwcml2YXRlIHN0YXRpYyBZRUFSX01TOiBudW1iZXIgPSAxMDAwICogNjAgKiA2MCAqIDI0ICogNyAqIDQgKiAxMjtcbiAgcHJpdmF0ZSBzdGF0aWMgTUFQUEVSOiBhbnkgPSBbXG4gICAgeyBzaW5nbGU6ICdsYXN0IHllYXInLCBtYW55OiAneWVhcnMnLCBkaXY6IDEgfSxcbiAgICB7IHNpbmdsZTogJ2xhc3QgbW9udGgnLCBtYW55OiAnbW9udGhzJywgZGl2OiAxMiB9LFxuICAgIHsgc2luZ2xlOiAnbGFzdCB3ZWVrJywgbWFueTogJ3dlZWtzJywgZGl2OiA0IH0sXG4gICAgeyBzaW5nbGU6ICd5ZXN0ZXJkYXknLCBtYW55OiAnZGF5cycsIGRpdjogNyB9LFxuICAgIHsgc2luZ2xlOiAnYW4gaG91ciBhZ28nLCBtYW55OiAnaG91cnMnLCBkaXY6IDI0IH0sXG4gICAgeyBzaW5nbGU6ICdqdXN0IG5vdycsIG1hbnk6ICdtaW51dGVzJywgZGl2OiA2MCB9LFxuICBdO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gaW5wdXREYXRlOiBEYXRlIHwgTW9tZW50IC0gbm90IGluY2x1ZGVkIGFzIFR5cGVTY3JpcHQgaW50ZXJmYWNlLFxuICAgKiBpbiBvcmRlciB0byBrZWVwIGBuZ3gtcGlwZXNgIFwicHVyZVwiIGZyb20gZGVwZW5kZW5jaWVzIVxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybShpbnB1dERhdGU6IGFueSk6IHN0cmluZyB7XG4gICAgaWYgKCFpbnB1dERhdGUgfHwgKCFpbnB1dERhdGUuZ2V0VGltZSAmJiAhaW5wdXREYXRlLnRvRGF0ZSkpIHtcbiAgICAgIHJldHVybiAnSW52YWxpZCBkYXRlJztcbiAgICB9XG5cbiAgICBjb25zdCBwYXN0ID0gaW5wdXREYXRlLnRvRGF0ZSA/IGlucHV0RGF0ZS50b0RhdGUoKSA6IGlucHV0RGF0ZS5nZXRUaW1lKCk7XG4gICAgY29uc3Qgbm93ID0gK25ldyBEYXRlKCk7XG5cbiAgICBpZiAocGFzdCA+IG5vdykge1xuICAgICAgcmV0dXJuICdpbiB0aGUgZnV0dXJlJztcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IFRpbWVBZ29QaXBlLk1BUFBFUi5sZW5ndGgsIG1zID0gbm93IC0gcGFzdCwgZGl2ID0gVGltZUFnb1BpcGUuWUVBUl9NUzsgaSA8IGw7ICsraSkge1xuICAgICAgY29uc3QgZWxtID0gVGltZUFnb1BpcGUuTUFQUEVSW2ldO1xuICAgICAgY29uc3QgdW5pdCA9IE1hdGguZmxvb3IobXMgLyAoZGl2IC89IGVsbS5kaXYpKTtcblxuICAgICAgaWYgKHVuaXQgPj0gMSkge1xuICAgICAgICByZXR1cm4gdW5pdCA9PT0gMSA/IGVsbS5zaW5nbGUgOiBgJHt1bml0fSAke2VsbS5tYW55fSBhZ29gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnanVzdCBub3cnO1xuICB9XG59XG4iXX0=