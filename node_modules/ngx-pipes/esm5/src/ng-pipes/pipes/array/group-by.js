import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isFunction } from '../helpers/helpers';
var GroupByPipe = /** @class */ (function () {
    function GroupByPipe() {
    }
    GroupByPipe.prototype.transform = function (input, discriminator, delimiter) {
        if (discriminator === void 0) { discriminator = []; }
        if (delimiter === void 0) { delimiter = '|'; }
        if (!Array.isArray(input)) {
            return input;
        }
        return this.groupBy(input, discriminator, delimiter);
    };
    GroupByPipe.prototype.groupBy = function (list, discriminator, delimiter) {
        var _this = this;
        return list.reduce(function (acc, payload) {
            var key = _this.extractKeyByDiscriminator(discriminator, payload, delimiter);
            acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];
            return acc;
        }, {});
    };
    GroupByPipe.prototype.extractKeyByDiscriminator = function (discriminator, payload, delimiter) {
        if (isFunction(discriminator)) {
            return discriminator(payload);
        }
        if (Array.isArray(discriminator)) {
            return discriminator.map(function (k) { return extractDeepPropertyByMapKey(payload, k); }).join(delimiter);
        }
        return extractDeepPropertyByMapKey(payload, discriminator);
    };
    GroupByPipe = __decorate([
        Pipe({ name: 'groupBy' })
    ], GroupByPipe);
    return GroupByPipe;
}());
export { GroupByPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtYnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvbmctcGlwZXMvcGlwZXMvYXJyYXkvZ3JvdXAtYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUc3RTtJQUFBO0lBOEJBLENBQUM7SUE3QkMsK0JBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxhQUF1QixFQUFFLFNBQXVCO1FBQWhELDhCQUFBLEVBQUEsa0JBQXVCO1FBQUUsMEJBQUEsRUFBQSxlQUF1QjtRQUNwRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6QixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVPLDZCQUFPLEdBQWYsVUFBZ0IsSUFBVyxFQUFFLGFBQWtCLEVBQUUsU0FBaUI7UUFBbEUsaUJBUUM7UUFQQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFRLEVBQUUsT0FBZTtZQUMzQyxJQUFNLEdBQUcsR0FBRyxLQUFJLENBQUMseUJBQXlCLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUU5RSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFNUUsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDO0lBRU8sK0NBQXlCLEdBQWpDLFVBQWtDLGFBQWtCLEVBQUUsT0FBZSxFQUFFLFNBQWlCO1FBQ3RGLElBQUksVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzdCLE9BQWtCLGFBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQztRQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNoQyxPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSwyQkFBMkIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQXZDLENBQXVDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDeEY7UUFFRCxPQUFPLDJCQUEyQixDQUFDLE9BQU8sRUFBVSxhQUFhLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBN0JVLFdBQVc7UUFEdkIsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDO09BQ2IsV0FBVyxDQThCdkI7SUFBRCxrQkFBQztDQUFBLEFBOUJELElBOEJDO1NBOUJZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXksIGlzRnVuY3Rpb24gfSBmcm9tICcuLi9oZWxwZXJzL2hlbHBlcnMnO1xuXG5AUGlwZSh7IG5hbWU6ICdncm91cEJ5JyB9KVxuZXhwb3J0IGNsYXNzIEdyb3VwQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBkaXNjcmltaW5hdG9yOiBhbnkgPSBbXSwgZGVsaW1pdGVyOiBzdHJpbmcgPSAnfCcpOiBhbnkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ncm91cEJ5KGlucHV0LCBkaXNjcmltaW5hdG9yLCBkZWxpbWl0ZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBncm91cEJ5KGxpc3Q6IGFueVtdLCBkaXNjcmltaW5hdG9yOiBhbnksIGRlbGltaXRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGxpc3QucmVkdWNlKChhY2M6IGFueSwgcGF5bG9hZDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLmV4dHJhY3RLZXlCeURpc2NyaW1pbmF0b3IoZGlzY3JpbWluYXRvciwgcGF5bG9hZCwgZGVsaW1pdGVyKTtcblxuICAgICAgYWNjW2tleV0gPSBBcnJheS5pc0FycmF5KGFjY1trZXldKSA/IGFjY1trZXldLmNvbmNhdChbcGF5bG9hZF0pIDogW3BheWxvYWRdO1xuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEtleUJ5RGlzY3JpbWluYXRvcihkaXNjcmltaW5hdG9yOiBhbnksIHBheWxvYWQ6IHN0cmluZywgZGVsaW1pdGVyOiBzdHJpbmcpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihkaXNjcmltaW5hdG9yKSkge1xuICAgICAgcmV0dXJuICg8RnVuY3Rpb24+ZGlzY3JpbWluYXRvcikocGF5bG9hZCk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzY3JpbWluYXRvcikpIHtcbiAgICAgIHJldHVybiBkaXNjcmltaW5hdG9yLm1hcChrID0+IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShwYXlsb2FkLCBrKSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkocGF5bG9hZCwgPHN0cmluZz5kaXNjcmltaW5hdG9yKTtcbiAgfVxufVxuIl19