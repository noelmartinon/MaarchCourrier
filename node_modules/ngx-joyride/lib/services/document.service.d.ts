import { ElementRef } from '@angular/core';
import { DomRefService } from './dom.service';
import * as ɵngcc0 from '@angular/core';
export interface IDocumentService {
    getElementFixedTop(elementRef: ElementRef): number;
    getElementFixedLeft(elementRef: ElementRef): any;
    getElementAbsoluteTop(elementRef: ElementRef): any;
    getElementAbsoluteLeft(elementRef: ElementRef): any;
    setDocumentHeight(): any;
    getDocumentHeight(): number;
    isParentScrollable(elementRef: ElementRef): boolean;
    isElementBeyondOthers(elementRef: ElementRef, isElementFixed: boolean, keywordToDiscard: string): number;
    scrollToTheTop(elementRef: ElementRef): void;
    scrollToTheBottom(elementRef: ElementRef): void;
}
export declare class DocumentService implements IDocumentService {
    private readonly DOMService;
    private documentHeight;
    constructor(DOMService: DomRefService);
    getElementFixedTop(elementRef: ElementRef): any;
    getElementFixedLeft(elementRef: ElementRef): any;
    getElementAbsoluteTop(elementRef: ElementRef): any;
    getElementAbsoluteLeft(elementRef: ElementRef): any;
    setDocumentHeight(): void;
    getDocumentHeight(): number;
    isParentScrollable(elementRef: ElementRef): boolean;
    isElementBeyondOthers(elementRef: ElementRef, isElementFixed: boolean, keywordToDiscard: string): 1 | 2 | 3;
    scrollIntoView(elementRef: ElementRef, isElementFixed: boolean): void;
    scrollToTheTop(elementRef: ElementRef): void;
    scrollToTheBottom(elementRef: ElementRef): void;
    private getFirstScrollableParent;
    private calculateDocumentHeight;
    private getScrollOffsets;
    private elementsFromPoint;
    private getFirstElementWithoutKeyword;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DocumentService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DocumentService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJkb2N1bWVudC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRG9tUmVmU2VydmljZSB9IGZyb20gJy4vZG9tLnNlcnZpY2UnO1xyXG5leHBvcnQgaW50ZXJmYWNlIElEb2N1bWVudFNlcnZpY2Uge1xyXG4gICAgZ2V0RWxlbWVudEZpeGVkVG9wKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpOiBudW1iZXI7XHJcbiAgICBnZXRFbGVtZW50Rml4ZWRMZWZ0KGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpOiBhbnk7XHJcbiAgICBnZXRFbGVtZW50QWJzb2x1dGVUb3AoZWxlbWVudFJlZjogRWxlbWVudFJlZik6IGFueTtcclxuICAgIGdldEVsZW1lbnRBYnNvbHV0ZUxlZnQoZWxlbWVudFJlZjogRWxlbWVudFJlZik6IGFueTtcclxuICAgIHNldERvY3VtZW50SGVpZ2h0KCk6IGFueTtcclxuICAgIGdldERvY3VtZW50SGVpZ2h0KCk6IG51bWJlcjtcclxuICAgIGlzUGFyZW50U2Nyb2xsYWJsZShlbGVtZW50UmVmOiBFbGVtZW50UmVmKTogYm9vbGVhbjtcclxuICAgIGlzRWxlbWVudEJleW9uZE90aGVycyhlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBpc0VsZW1lbnRGaXhlZDogYm9vbGVhbiwga2V5d29yZFRvRGlzY2FyZDogc3RyaW5nKTogbnVtYmVyO1xyXG4gICAgc2Nyb2xsVG9UaGVUb3AoZWxlbWVudFJlZjogRWxlbWVudFJlZik6IHZvaWQ7XHJcbiAgICBzY3JvbGxUb1RoZUJvdHRvbShlbGVtZW50UmVmOiBFbGVtZW50UmVmKTogdm9pZDtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEb2N1bWVudFNlcnZpY2UgaW1wbGVtZW50cyBJRG9jdW1lbnRTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgRE9NU2VydmljZTtcclxuICAgIHByaXZhdGUgZG9jdW1lbnRIZWlnaHQ7XHJcbiAgICBjb25zdHJ1Y3RvcihET01TZXJ2aWNlOiBEb21SZWZTZXJ2aWNlKTtcclxuICAgIGdldEVsZW1lbnRGaXhlZFRvcChlbGVtZW50UmVmOiBFbGVtZW50UmVmKTogYW55O1xyXG4gICAgZ2V0RWxlbWVudEZpeGVkTGVmdChlbGVtZW50UmVmOiBFbGVtZW50UmVmKTogYW55O1xyXG4gICAgZ2V0RWxlbWVudEFic29sdXRlVG9wKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpOiBhbnk7XHJcbiAgICBnZXRFbGVtZW50QWJzb2x1dGVMZWZ0KGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpOiBhbnk7XHJcbiAgICBzZXREb2N1bWVudEhlaWdodCgpOiB2b2lkO1xyXG4gICAgZ2V0RG9jdW1lbnRIZWlnaHQoKTogbnVtYmVyO1xyXG4gICAgaXNQYXJlbnRTY3JvbGxhYmxlKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpOiBib29sZWFuO1xyXG4gICAgaXNFbGVtZW50QmV5b25kT3RoZXJzKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGlzRWxlbWVudEZpeGVkOiBib29sZWFuLCBrZXl3b3JkVG9EaXNjYXJkOiBzdHJpbmcpOiAxIHwgMiB8IDM7XHJcbiAgICBzY3JvbGxJbnRvVmlldyhlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBpc0VsZW1lbnRGaXhlZDogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBzY3JvbGxUb1RoZVRvcChlbGVtZW50UmVmOiBFbGVtZW50UmVmKTogdm9pZDtcclxuICAgIHNjcm9sbFRvVGhlQm90dG9tKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBnZXRGaXJzdFNjcm9sbGFibGVQYXJlbnQ7XHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZURvY3VtZW50SGVpZ2h0O1xyXG4gICAgcHJpdmF0ZSBnZXRTY3JvbGxPZmZzZXRzO1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50c0Zyb21Qb2ludDtcclxuICAgIHByaXZhdGUgZ2V0Rmlyc3RFbGVtZW50V2l0aG91dEtleXdvcmQ7XHJcbn1cclxuIl19