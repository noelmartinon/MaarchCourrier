import { JoyrideBackdropService } from './joyride-backdrop.service';
import { EventListenerService } from './event-listener.service';
import { JoyrideStepsContainerService } from './joyride-steps-container.service';
import { DocumentService } from './document.service';
import { StepDrawerService } from './step-drawer.service';
import { DomRefService } from './dom.service';
import { JoyrideOptionsService } from './joyride-options.service';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { JoyrideStepInfo } from '../models/joyride-step-info.class';
import { LoggerService } from './logger.service';
import * as ɵngcc0 from '@angular/core';
export declare const DISTANCE_FROM_TARGET = 15;
export declare const ARROW_SIZE = 10;
export interface IJoyrideStepService {
    startTour(): Observable<JoyrideStepInfo>;
    close(): any;
    prev(): any;
    next(): any;
}
export declare class JoyrideStepService implements IJoyrideStepService {
    private readonly backDropService;
    private readonly eventListener;
    private readonly stepsContainerService;
    private readonly documentService;
    private readonly DOMService;
    private readonly stepDrawerService;
    private readonly optionsService;
    private readonly router;
    private readonly logger;
    private currentStep;
    private winTopPosition;
    private winBottomPosition;
    private stepsObserver;
    constructor(backDropService: JoyrideBackdropService, eventListener: EventListenerService, stepsContainerService: JoyrideStepsContainerService, documentService: DocumentService, DOMService: DomRefService, stepDrawerService: StepDrawerService, optionsService: JoyrideOptionsService, router: Router, logger: LoggerService);
    private initViewportPositions;
    private subscribeToScrollEvents;
    private subscribeToResizeEvents;
    private drawStep;
    startTour(): Observable<JoyrideStepInfo>;
    close(): void;
    prev(): void;
    next(): void;
    private navigateToStepPage;
    private subscribeToStepsUpdates;
    private tryShowStep;
    private showStep;
    private notifyStepClicked;
    private notifyTourIsFinished;
    private removeCurrentStep;
    private scrollIfStepAndTargetAreNotVisible;
    private scrollWhenTargetOrStepAreHiddenBottom;
    private scrollWhenTargetOrStepAreHiddenTop;
    private getMaxTargetAndStepBottomPosition;
    private getMaxTargetAndStepTopPosition;
    private scrollIfElementBeyondOtherElements;
    private isElementBeyondOthers;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JoyrideStepService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<JoyrideStepService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS1zdGVwLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiam95cmlkZS1zdGVwLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKb3lyaWRlQmFja2Ryb3BTZXJ2aWNlIH0gZnJvbSAnLi9qb3lyaWRlLWJhY2tkcm9wLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFdmVudExpc3RlbmVyU2VydmljZSB9IGZyb20gJy4vZXZlbnQtbGlzdGVuZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IEpveXJpZGVTdGVwc0NvbnRhaW5lclNlcnZpY2UgfSBmcm9tICcuL2pveXJpZGUtc3RlcHMtY29udGFpbmVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEb2N1bWVudFNlcnZpY2UgfSBmcm9tICcuL2RvY3VtZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdGVwRHJhd2VyU2VydmljZSB9IGZyb20gJy4vc3RlcC1kcmF3ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IERvbVJlZlNlcnZpY2UgfSBmcm9tICcuL2RvbS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSm95cmlkZU9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi9qb3lyaWRlLW9wdGlvbnMuc2VydmljZSc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSm95cmlkZVN0ZXBJbmZvIH0gZnJvbSAnLi4vbW9kZWxzL2pveXJpZGUtc3RlcC1pbmZvLmNsYXNzJztcclxuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4vbG9nZ2VyLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBESVNUQU5DRV9GUk9NX1RBUkdFVCA9IDE1O1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBBUlJPV19TSVpFID0gMTA7XHJcbmV4cG9ydCBpbnRlcmZhY2UgSUpveXJpZGVTdGVwU2VydmljZSB7XHJcbiAgICBzdGFydFRvdXIoKTogT2JzZXJ2YWJsZTxKb3lyaWRlU3RlcEluZm8+O1xyXG4gICAgY2xvc2UoKTogYW55O1xyXG4gICAgcHJldigpOiBhbnk7XHJcbiAgICBuZXh0KCk6IGFueTtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBKb3lyaWRlU3RlcFNlcnZpY2UgaW1wbGVtZW50cyBJSm95cmlkZVN0ZXBTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFja0Ryb3BTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBldmVudExpc3RlbmVyO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGVwc0NvbnRhaW5lclNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50U2VydmljZTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgRE9NU2VydmljZTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RlcERyYXdlclNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnNTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSByb3V0ZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjtcclxuICAgIHByaXZhdGUgY3VycmVudFN0ZXA7XHJcbiAgICBwcml2YXRlIHdpblRvcFBvc2l0aW9uO1xyXG4gICAgcHJpdmF0ZSB3aW5Cb3R0b21Qb3NpdGlvbjtcclxuICAgIHByaXZhdGUgc3RlcHNPYnNlcnZlcjtcclxuICAgIGNvbnN0cnVjdG9yKGJhY2tEcm9wU2VydmljZTogSm95cmlkZUJhY2tkcm9wU2VydmljZSwgZXZlbnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lclNlcnZpY2UsIHN0ZXBzQ29udGFpbmVyU2VydmljZTogSm95cmlkZVN0ZXBzQ29udGFpbmVyU2VydmljZSwgZG9jdW1lbnRTZXJ2aWNlOiBEb2N1bWVudFNlcnZpY2UsIERPTVNlcnZpY2U6IERvbVJlZlNlcnZpY2UsIHN0ZXBEcmF3ZXJTZXJ2aWNlOiBTdGVwRHJhd2VyU2VydmljZSwgb3B0aW9uc1NlcnZpY2U6IEpveXJpZGVPcHRpb25zU2VydmljZSwgcm91dGVyOiBSb3V0ZXIsIGxvZ2dlcjogTG9nZ2VyU2VydmljZSk7XHJcbiAgICBwcml2YXRlIGluaXRWaWV3cG9ydFBvc2l0aW9ucztcclxuICAgIHByaXZhdGUgc3Vic2NyaWJlVG9TY3JvbGxFdmVudHM7XHJcbiAgICBwcml2YXRlIHN1YnNjcmliZVRvUmVzaXplRXZlbnRzO1xyXG4gICAgcHJpdmF0ZSBkcmF3U3RlcDtcclxuICAgIHN0YXJ0VG91cigpOiBPYnNlcnZhYmxlPEpveXJpZGVTdGVwSW5mbz47XHJcbiAgICBjbG9zZSgpOiB2b2lkO1xyXG4gICAgcHJldigpOiB2b2lkO1xyXG4gICAgbmV4dCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBuYXZpZ2F0ZVRvU3RlcFBhZ2U7XHJcbiAgICBwcml2YXRlIHN1YnNjcmliZVRvU3RlcHNVcGRhdGVzO1xyXG4gICAgcHJpdmF0ZSB0cnlTaG93U3RlcDtcclxuICAgIHByaXZhdGUgc2hvd1N0ZXA7XHJcbiAgICBwcml2YXRlIG5vdGlmeVN0ZXBDbGlja2VkO1xyXG4gICAgcHJpdmF0ZSBub3RpZnlUb3VySXNGaW5pc2hlZDtcclxuICAgIHByaXZhdGUgcmVtb3ZlQ3VycmVudFN0ZXA7XHJcbiAgICBwcml2YXRlIHNjcm9sbElmU3RlcEFuZFRhcmdldEFyZU5vdFZpc2libGU7XHJcbiAgICBwcml2YXRlIHNjcm9sbFdoZW5UYXJnZXRPclN0ZXBBcmVIaWRkZW5Cb3R0b207XHJcbiAgICBwcml2YXRlIHNjcm9sbFdoZW5UYXJnZXRPclN0ZXBBcmVIaWRkZW5Ub3A7XHJcbiAgICBwcml2YXRlIGdldE1heFRhcmdldEFuZFN0ZXBCb3R0b21Qb3NpdGlvbjtcclxuICAgIHByaXZhdGUgZ2V0TWF4VGFyZ2V0QW5kU3RlcFRvcFBvc2l0aW9uO1xyXG4gICAgcHJpdmF0ZSBzY3JvbGxJZkVsZW1lbnRCZXlvbmRPdGhlckVsZW1lbnRzO1xyXG4gICAgcHJpdmF0ZSBpc0VsZW1lbnRCZXlvbmRPdGhlcnM7XHJcbn1cclxuIl19