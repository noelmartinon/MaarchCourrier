import { JoyrideOptions, ICustomTexts } from '../models/joyride-options.class';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare const DEFAULT_THEME_COLOR = "#3b5560";
export declare const STEP_DEFAULT_POSITION = "bottom";
export declare const DEFAULT_TIMEOUT_BETWEEN_STEPS = 1;
export declare class ObservableCustomTexts implements ICustomTexts {
    prev: Observable<string>;
    next: Observable<string>;
    done: Observable<string>;
    close: Observable<string>;
}
export declare const DEFAULT_TEXTS: ObservableCustomTexts;
export interface IJoyrideOptionsService {
    setOptions(options: JoyrideOptions): void;
    getBackdropColor(): string;
    getThemeColor(): string;
    getStepDefaultPosition(): any;
    getStepsOrder(): string[];
    getFirstStep(): string;
    getWaitingTime(): number;
    areLogsEnabled(): boolean;
    isCounterVisible(): boolean;
    isPrevButtonVisible(): boolean;
    getCustomTexts(): ObservableCustomTexts;
}
export declare class JoyrideOptionsService implements IJoyrideOptionsService {
    private themeColor;
    private stepDefaultPosition;
    private logsEnabled;
    private showCounter;
    private showPrevButton;
    private stepsOrder;
    private firstStep;
    private waitingTime;
    private customTexts;
    setOptions(options: JoyrideOptions): void;
    getBackdropColor(): string;
    getThemeColor(): string;
    getStepDefaultPosition(): string;
    getStepsOrder(): string[];
    getFirstStep(): string;
    getWaitingTime(): number;
    areLogsEnabled(): boolean;
    isCounterVisible(): boolean;
    isPrevButtonVisible(): boolean;
    getCustomTexts(): ObservableCustomTexts;
    private setCustomText;
    private toObservable;
    private hexToRgb;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JoyrideOptionsService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<JoyrideOptionsService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS1vcHRpb25zLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiam95cmlkZS1vcHRpb25zLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSm95cmlkZU9wdGlvbnMsIElDdXN0b21UZXh0cyB9IGZyb20gJy4uL21vZGVscy9qb3lyaWRlLW9wdGlvbnMuY2xhc3MnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IERFRkFVTFRfVEhFTUVfQ09MT1IgPSBcIiMzYjU1NjBcIjtcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgU1RFUF9ERUZBVUxUX1BPU0lUSU9OID0gXCJib3R0b21cIjtcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgREVGQVVMVF9USU1FT1VUX0JFVFdFRU5fU1RFUFMgPSAxO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPYnNlcnZhYmxlQ3VzdG9tVGV4dHMgaW1wbGVtZW50cyBJQ3VzdG9tVGV4dHMge1xyXG4gICAgcHJldjogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgbmV4dDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgZG9uZTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgY2xvc2U6IE9ic2VydmFibGU8c3RyaW5nPjtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBERUZBVUxUX1RFWFRTOiBPYnNlcnZhYmxlQ3VzdG9tVGV4dHM7XHJcbmV4cG9ydCBpbnRlcmZhY2UgSUpveXJpZGVPcHRpb25zU2VydmljZSB7XHJcbiAgICBzZXRPcHRpb25zKG9wdGlvbnM6IEpveXJpZGVPcHRpb25zKTogdm9pZDtcclxuICAgIGdldEJhY2tkcm9wQ29sb3IoKTogc3RyaW5nO1xyXG4gICAgZ2V0VGhlbWVDb2xvcigpOiBzdHJpbmc7XHJcbiAgICBnZXRTdGVwRGVmYXVsdFBvc2l0aW9uKCk6IGFueTtcclxuICAgIGdldFN0ZXBzT3JkZXIoKTogc3RyaW5nW107XHJcbiAgICBnZXRGaXJzdFN0ZXAoKTogc3RyaW5nO1xyXG4gICAgZ2V0V2FpdGluZ1RpbWUoKTogbnVtYmVyO1xyXG4gICAgYXJlTG9nc0VuYWJsZWQoKTogYm9vbGVhbjtcclxuICAgIGlzQ291bnRlclZpc2libGUoKTogYm9vbGVhbjtcclxuICAgIGlzUHJldkJ1dHRvblZpc2libGUoKTogYm9vbGVhbjtcclxuICAgIGdldEN1c3RvbVRleHRzKCk6IE9ic2VydmFibGVDdXN0b21UZXh0cztcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBKb3lyaWRlT3B0aW9uc1NlcnZpY2UgaW1wbGVtZW50cyBJSm95cmlkZU9wdGlvbnNTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgdGhlbWVDb2xvcjtcclxuICAgIHByaXZhdGUgc3RlcERlZmF1bHRQb3NpdGlvbjtcclxuICAgIHByaXZhdGUgbG9nc0VuYWJsZWQ7XHJcbiAgICBwcml2YXRlIHNob3dDb3VudGVyO1xyXG4gICAgcHJpdmF0ZSBzaG93UHJldkJ1dHRvbjtcclxuICAgIHByaXZhdGUgc3RlcHNPcmRlcjtcclxuICAgIHByaXZhdGUgZmlyc3RTdGVwO1xyXG4gICAgcHJpdmF0ZSB3YWl0aW5nVGltZTtcclxuICAgIHByaXZhdGUgY3VzdG9tVGV4dHM7XHJcbiAgICBzZXRPcHRpb25zKG9wdGlvbnM6IEpveXJpZGVPcHRpb25zKTogdm9pZDtcclxuICAgIGdldEJhY2tkcm9wQ29sb3IoKTogc3RyaW5nO1xyXG4gICAgZ2V0VGhlbWVDb2xvcigpOiBzdHJpbmc7XHJcbiAgICBnZXRTdGVwRGVmYXVsdFBvc2l0aW9uKCk6IHN0cmluZztcclxuICAgIGdldFN0ZXBzT3JkZXIoKTogc3RyaW5nW107XHJcbiAgICBnZXRGaXJzdFN0ZXAoKTogc3RyaW5nO1xyXG4gICAgZ2V0V2FpdGluZ1RpbWUoKTogbnVtYmVyO1xyXG4gICAgYXJlTG9nc0VuYWJsZWQoKTogYm9vbGVhbjtcclxuICAgIGlzQ291bnRlclZpc2libGUoKTogYm9vbGVhbjtcclxuICAgIGlzUHJldkJ1dHRvblZpc2libGUoKTogYm9vbGVhbjtcclxuICAgIGdldEN1c3RvbVRleHRzKCk6IE9ic2VydmFibGVDdXN0b21UZXh0cztcclxuICAgIHByaXZhdGUgc2V0Q3VzdG9tVGV4dDtcclxuICAgIHByaXZhdGUgdG9PYnNlcnZhYmxlO1xyXG4gICAgcHJpdmF0ZSBoZXhUb1JnYjtcclxufVxyXG4iXX0=