import { AfterViewInit, OnInit, OnDestroy, ElementRef, Renderer2, Injector, TemplateRef } from '@angular/core';
import { JoyrideStep } from '../../models/joyride-step.class';
import { IJoyrideStepService } from '../../services';
import { JoyrideStepsContainerService } from '../../services/joyride-steps-container.service';
import { EventListenerService } from '../../services/event-listener.service';
import { Observable } from 'rxjs';
import { DocumentService } from '../../services/document.service';
import { JoyrideOptionsService } from '../../services/joyride-options.service';
import { LoggerService } from '../../services/logger.service';
import { TemplatesService } from '../../services/templates.service';
import * as ɵngcc0 from '@angular/core';
export declare const DEFAULT_DISTANCE_FROM_MARGIN_TOP = 2;
export declare const DEFAULT_DISTANCE_FROM_MARGIN_LEFT = 2;
export declare class JoyrideStepComponent implements OnInit, OnDestroy, AfterViewInit {
    private injector;
    private readonly stepsContainerService;
    private readonly eventListenerService;
    private readonly documentService;
    private readonly renderer;
    private readonly logger;
    private readonly optionsService;
    private readonly templateService;
    stepWidth: number;
    stepHeight: number;
    leftPosition: number;
    topPosition: number;
    showArrow: boolean;
    arrowPosition: string;
    arrowLeftPosition: number;
    arrowTopPosition: number;
    title: Observable<string>;
    text: Observable<string>;
    counter: string;
    isCounterVisible: boolean;
    isPrevButtonVisible: boolean;
    themeColor: string;
    customContent: TemplateRef<any>;
    customPrevButton: TemplateRef<any>;
    customNextButton: TemplateRef<any>;
    customDoneButton: TemplateRef<any>;
    customCounter: TemplateRef<any>;
    counterData: any;
    ctx: Object;
    private arrowSize;
    private stepAbsoluteLeft;
    private stepAbsoluteTop;
    private targetWidth;
    targetHeight: number;
    private targetAbsoluteLeft;
    private targetAbsoluteTop;
    private subscriptions;
    joyrideStepService: IJoyrideStepService;
    private positionAlreadyFixed;
    private documentHeight;
    prevText: Observable<string>;
    nextText: Observable<string>;
    doneText: Observable<string>;
    step?: JoyrideStep;
    stepHolder: ElementRef;
    stepContainer: ElementRef;
    constructor(injector: Injector, stepsContainerService: JoyrideStepsContainerService, eventListenerService: EventListenerService, documentService: DocumentService, renderer: Renderer2, logger: LoggerService, optionsService: JoyrideOptionsService, templateService: TemplatesService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    private checkRedraw;
    private isCustomized;
    private setCustomTexts;
    private drawStep;
    private getCounter;
    private setCustomTemplates;
    prev(): void;
    next(): void;
    close(): void;
    isFirstStep(): boolean;
    isLastStep(): boolean;
    private setStepStyle;
    private setStyleTop;
    private setStyleRight;
    private setStyleBottom;
    private setStyleLeft;
    private setStyleCenter;
    private adjustLeftPosition;
    private adjustRightPosition;
    private adjustTopPosition;
    private adjustBottomPosition;
    private autofixTopPosition;
    private autofixRightPosition;
    private autofixBottomPosition;
    private autofixLeftPosition;
    private subscribeToResizeEvents;
    private redrawStep;
    private getDimensionsByAspectRatio;
    private adjustDimensions;
    private updateStepDimensions;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JoyrideStepComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<JoyrideStepComponent, "joyride-step", never, { "step": "step"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS1zdGVwLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJqb3lyaWRlLXN0ZXAuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBPbkluaXQsIE9uRGVzdHJveSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbmplY3RvciwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSm95cmlkZVN0ZXAgfSBmcm9tICcuLi8uLi9tb2RlbHMvam95cmlkZS1zdGVwLmNsYXNzJztcclxuaW1wb3J0IHsgSUpveXJpZGVTdGVwU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzJztcclxuaW1wb3J0IHsgSm95cmlkZVN0ZXBzQ29udGFpbmVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2pveXJpZGUtc3RlcHMtY29udGFpbmVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFdmVudExpc3RlbmVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2V2ZW50LWxpc3RlbmVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IERvY3VtZW50U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RvY3VtZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBKb3lyaWRlT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9qb3lyaWRlLW9wdGlvbnMuc2VydmljZSc7XHJcbmltcG9ydCB7IExvZ2dlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9sb2dnZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFRlbXBsYXRlc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90ZW1wbGF0ZXMuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IERFRkFVTFRfRElTVEFOQ0VfRlJPTV9NQVJHSU5fVE9QID0gMjtcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgREVGQVVMVF9ESVNUQU5DRV9GUk9NX01BUkdJTl9MRUZUID0gMjtcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSm95cmlkZVN0ZXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBwcml2YXRlIGluamVjdG9yO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGVwc0NvbnRhaW5lclNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50TGlzdGVuZXJTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnNTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZW1wbGF0ZVNlcnZpY2U7XHJcbiAgICBzdGVwV2lkdGg6IG51bWJlcjtcclxuICAgIHN0ZXBIZWlnaHQ6IG51bWJlcjtcclxuICAgIGxlZnRQb3NpdGlvbjogbnVtYmVyO1xyXG4gICAgdG9wUG9zaXRpb246IG51bWJlcjtcclxuICAgIHNob3dBcnJvdzogYm9vbGVhbjtcclxuICAgIGFycm93UG9zaXRpb246IHN0cmluZztcclxuICAgIGFycm93TGVmdFBvc2l0aW9uOiBudW1iZXI7XHJcbiAgICBhcnJvd1RvcFBvc2l0aW9uOiBudW1iZXI7XHJcbiAgICB0aXRsZTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgdGV4dDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgY291bnRlcjogc3RyaW5nO1xyXG4gICAgaXNDb3VudGVyVmlzaWJsZTogYm9vbGVhbjtcclxuICAgIGlzUHJldkJ1dHRvblZpc2libGU6IGJvb2xlYW47XHJcbiAgICB0aGVtZUNvbG9yOiBzdHJpbmc7XHJcbiAgICBjdXN0b21Db250ZW50OiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgY3VzdG9tUHJldkJ1dHRvbjogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGN1c3RvbU5leHRCdXR0b246IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBjdXN0b21Eb25lQnV0dG9uOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgY3VzdG9tQ291bnRlcjogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGNvdW50ZXJEYXRhOiBhbnk7XHJcbiAgICBjdHg6IE9iamVjdDtcclxuICAgIHByaXZhdGUgYXJyb3dTaXplO1xyXG4gICAgcHJpdmF0ZSBzdGVwQWJzb2x1dGVMZWZ0O1xyXG4gICAgcHJpdmF0ZSBzdGVwQWJzb2x1dGVUb3A7XHJcbiAgICBwcml2YXRlIHRhcmdldFdpZHRoO1xyXG4gICAgdGFyZ2V0SGVpZ2h0OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHRhcmdldEFic29sdXRlTGVmdDtcclxuICAgIHByaXZhdGUgdGFyZ2V0QWJzb2x1dGVUb3A7XHJcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XHJcbiAgICBqb3lyaWRlU3RlcFNlcnZpY2U6IElKb3lyaWRlU3RlcFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHBvc2l0aW9uQWxyZWFkeUZpeGVkO1xyXG4gICAgcHJpdmF0ZSBkb2N1bWVudEhlaWdodDtcclxuICAgIHByZXZUZXh0OiBPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgICBuZXh0VGV4dDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgZG9uZVRleHQ6IE9ic2VydmFibGU8c3RyaW5nPjtcclxuICAgIHN0ZXA/OiBKb3lyaWRlU3RlcDtcclxuICAgIHN0ZXBIb2xkZXI6IEVsZW1lbnRSZWY7XHJcbiAgICBzdGVwQ29udGFpbmVyOiBFbGVtZW50UmVmO1xyXG4gICAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yLCBzdGVwc0NvbnRhaW5lclNlcnZpY2U6IEpveXJpZGVTdGVwc0NvbnRhaW5lclNlcnZpY2UsIGV2ZW50TGlzdGVuZXJTZXJ2aWNlOiBFdmVudExpc3RlbmVyU2VydmljZSwgZG9jdW1lbnRTZXJ2aWNlOiBEb2N1bWVudFNlcnZpY2UsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGxvZ2dlcjogTG9nZ2VyU2VydmljZSwgb3B0aW9uc1NlcnZpY2U6IEpveXJpZGVPcHRpb25zU2VydmljZSwgdGVtcGxhdGVTZXJ2aWNlOiBUZW1wbGF0ZXNTZXJ2aWNlKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIHByaXZhdGUgY2hlY2tSZWRyYXc7XHJcbiAgICBwcml2YXRlIGlzQ3VzdG9taXplZDtcclxuICAgIHByaXZhdGUgc2V0Q3VzdG9tVGV4dHM7XHJcbiAgICBwcml2YXRlIGRyYXdTdGVwO1xyXG4gICAgcHJpdmF0ZSBnZXRDb3VudGVyO1xyXG4gICAgcHJpdmF0ZSBzZXRDdXN0b21UZW1wbGF0ZXM7XHJcbiAgICBwcmV2KCk6IHZvaWQ7XHJcbiAgICBuZXh0KCk6IHZvaWQ7XHJcbiAgICBjbG9zZSgpOiB2b2lkO1xyXG4gICAgaXNGaXJzdFN0ZXAoKTogYm9vbGVhbjtcclxuICAgIGlzTGFzdFN0ZXAoKTogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgc2V0U3RlcFN0eWxlO1xyXG4gICAgcHJpdmF0ZSBzZXRTdHlsZVRvcDtcclxuICAgIHByaXZhdGUgc2V0U3R5bGVSaWdodDtcclxuICAgIHByaXZhdGUgc2V0U3R5bGVCb3R0b207XHJcbiAgICBwcml2YXRlIHNldFN0eWxlTGVmdDtcclxuICAgIHByaXZhdGUgc2V0U3R5bGVDZW50ZXI7XHJcbiAgICBwcml2YXRlIGFkanVzdExlZnRQb3NpdGlvbjtcclxuICAgIHByaXZhdGUgYWRqdXN0UmlnaHRQb3NpdGlvbjtcclxuICAgIHByaXZhdGUgYWRqdXN0VG9wUG9zaXRpb247XHJcbiAgICBwcml2YXRlIGFkanVzdEJvdHRvbVBvc2l0aW9uO1xyXG4gICAgcHJpdmF0ZSBhdXRvZml4VG9wUG9zaXRpb247XHJcbiAgICBwcml2YXRlIGF1dG9maXhSaWdodFBvc2l0aW9uO1xyXG4gICAgcHJpdmF0ZSBhdXRvZml4Qm90dG9tUG9zaXRpb247XHJcbiAgICBwcml2YXRlIGF1dG9maXhMZWZ0UG9zaXRpb247XHJcbiAgICBwcml2YXRlIHN1YnNjcmliZVRvUmVzaXplRXZlbnRzO1xyXG4gICAgcHJpdmF0ZSByZWRyYXdTdGVwO1xyXG4gICAgcHJpdmF0ZSBnZXREaW1lbnNpb25zQnlBc3BlY3RSYXRpbztcclxuICAgIHByaXZhdGUgYWRqdXN0RGltZW5zaW9ucztcclxuICAgIHByaXZhdGUgdXBkYXRlU3RlcERpbWVuc2lvbnM7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==