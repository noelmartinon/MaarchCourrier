import { __decorate } from "tslib";
import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';
import { Subject } from 'rxjs';
import { DomRefService } from './dom.service';
export class Scroll {
}
let EventListenerService = class EventListenerService {
    constructor(rendererFactory, DOMService) {
        this.rendererFactory = rendererFactory;
        this.DOMService = DOMService;
        this.scrollEvent = new Subject();
        this.resizeEvent = new Subject();
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    startListeningScrollEvents() {
        this.scrollUnlisten = this.renderer.listen('document', 'scroll', evt => {
            this.scrollEvent.next({
                scrollX: this.DOMService.getNativeWindow().pageXOffset,
                scrollY: this.DOMService.getNativeWindow().pageYOffset
            });
        });
    }
    startListeningResizeEvents() {
        this.resizeUnlisten = this.renderer.listen('window', 'resize', evt => {
            this.resizeEvent.next(evt);
        });
    }
    stopListeningScrollEvents() {
        this.scrollUnlisten();
    }
    stopListeningResizeEvents() {
        this.resizeUnlisten();
    }
};
EventListenerService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: DomRefService }
];
EventListenerService = __decorate([
    Injectable()
], EventListenerService);
export { EventListenerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtbGlzdGVuZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1qb3lyaWRlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2V2ZW50LWxpc3RlbmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5QyxNQUFNLE9BQU8sTUFBTTtDQUdsQjtBQUdELElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBUTdCLFlBQTZCLGVBQWlDLEVBQW1CLFVBQXlCO1FBQTdFLG9CQUFlLEdBQWYsZUFBZSxDQUFrQjtRQUFtQixlQUFVLEdBQVYsVUFBVSxDQUFlO1FBSDFHLGdCQUFXLEdBQW9CLElBQUksT0FBTyxFQUFVLENBQUM7UUFDckQsZ0JBQVcsR0FBb0IsSUFBSSxPQUFPLEVBQVUsQ0FBQztRQUdqRCxJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCwwQkFBMEI7UUFDdEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ25FLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO2dCQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXO2dCQUN0RCxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXO2FBQ3pELENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELDBCQUEwQjtRQUN0QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDakUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQseUJBQXlCO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQseUJBQXlCO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQ0osQ0FBQTs7WUExQmlELGdCQUFnQjtZQUErQixhQUFhOztBQVJqRyxvQkFBb0I7SUFEaEMsVUFBVSxFQUFFO0dBQ0Esb0JBQW9CLENBa0NoQztTQWxDWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIFJlbmRlcmVyRmFjdG9yeTIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERvbVJlZlNlcnZpY2UgfSBmcm9tICcuL2RvbS5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIFNjcm9sbCB7XG4gICAgc2Nyb2xsWDogbnVtYmVyO1xuICAgIHNjcm9sbFk6IG51bWJlcjtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEV2ZW50TGlzdGVuZXJTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgcHJpdmF0ZSBzY3JvbGxVbmxpc3RlbjogYW55O1xuICAgIHByaXZhdGUgcmVzaXplVW5saXN0ZW46IGFueTtcblxuICAgIHNjcm9sbEV2ZW50OiBTdWJqZWN0PFNjcm9sbD4gPSBuZXcgU3ViamVjdDxTY3JvbGw+KCk7XG4gICAgcmVzaXplRXZlbnQ6IFN1YmplY3Q8bnVtYmVyPiA9IG5ldyBTdWJqZWN0PG51bWJlcj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyLCBwcml2YXRlIHJlYWRvbmx5IERPTVNlcnZpY2U6IERvbVJlZlNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcbiAgICB9XG5cbiAgICBzdGFydExpc3RlbmluZ1Njcm9sbEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxVbmxpc3RlbiA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCdkb2N1bWVudCcsICdzY3JvbGwnLCBldnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxFdmVudC5uZXh0KHtcbiAgICAgICAgICAgICAgICBzY3JvbGxYOiB0aGlzLkRPTVNlcnZpY2UuZ2V0TmF0aXZlV2luZG93KCkucGFnZVhPZmZzZXQsXG4gICAgICAgICAgICAgICAgc2Nyb2xsWTogdGhpcy5ET01TZXJ2aWNlLmdldE5hdGl2ZVdpbmRvdygpLnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhcnRMaXN0ZW5pbmdSZXNpemVFdmVudHMoKSB7XG4gICAgICAgIHRoaXMucmVzaXplVW5saXN0ZW4gPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbignd2luZG93JywgJ3Jlc2l6ZScsIGV2dCA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZUV2ZW50Lm5leHQoZXZ0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RvcExpc3RlbmluZ1Njcm9sbEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxVbmxpc3RlbigpO1xuICAgIH1cblxuICAgIHN0b3BMaXN0ZW5pbmdSZXNpemVFdmVudHMoKSB7XG4gICAgICAgIHRoaXMucmVzaXplVW5saXN0ZW4oKTtcbiAgICB9XG59XG4iXX0=