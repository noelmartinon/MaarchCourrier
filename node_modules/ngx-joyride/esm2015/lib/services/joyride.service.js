import { __decorate, __param } from "tslib";
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { JoyrideStepService } from './joyride-step.service';
import { JoyrideOptionsService } from './joyride-options.service';
import { of } from 'rxjs';
import { finalize } from 'rxjs/operators';
import { JoyrideStepInfo } from '../models/joyride-step-info.class';
import { isPlatformBrowser } from '@angular/common';
let JoyrideService = class JoyrideService {
    constructor(platformId, stepService, optionsService) {
        this.platformId = platformId;
        this.stepService = stepService;
        this.optionsService = optionsService;
        this.tourInProgress = false;
    }
    startTour(options) {
        if (!isPlatformBrowser(this.platformId)) {
            return of(new JoyrideStepInfo());
        }
        if (!this.tourInProgress) {
            this.tourInProgress = true;
            if (options) {
                this.optionsService.setOptions(options);
            }
            this.tour$ = this.stepService.startTour().pipe(finalize(() => (this.tourInProgress = false)));
            this.tour$.subscribe();
        }
        return this.tour$;
    }
    closeTour() {
        if (this.isTourInProgress())
            this.stepService.close();
    }
    isTourInProgress() {
        return this.tourInProgress;
    }
};
JoyrideService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: JoyrideStepService },
    { type: JoyrideOptionsService }
];
JoyrideService = __decorate([
    Injectable(),
    __param(0, Inject(PLATFORM_ID))
], JoyrideService);
export { JoyrideService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWpveXJpZGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvam95cmlkZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbEUsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3BELElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUFJdkIsWUFDaUMsVUFBa0IsRUFDOUIsV0FBK0IsRUFDL0IsY0FBcUM7UUFGekIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUM5QixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFDL0IsbUJBQWMsR0FBZCxjQUFjLENBQXVCO1FBTmxELG1CQUFjLEdBQVksS0FBSyxDQUFDO0lBT3JDLENBQUM7SUFFSixTQUFTLENBQUMsT0FBd0I7UUFDOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLGVBQWUsRUFBRSxDQUFDLENBQUM7U0FDcEM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN0QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztZQUMzQixJQUFJLE9BQU8sRUFBRTtnQkFDVCxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMzQztZQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUMxQjtRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBRUQsZ0JBQWdCO1FBQ1osT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7Q0FDSixDQUFBOztZQTNCZ0QsTUFBTSx1QkFBOUMsTUFBTSxTQUFDLFdBQVc7WUFDVyxrQkFBa0I7WUFDZixxQkFBcUI7O0FBUGpELGNBQWM7SUFEMUIsVUFBVSxFQUFFO0lBTUosV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7R0FMZixjQUFjLENBZ0MxQjtTQWhDWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSm95cmlkZVN0ZXBTZXJ2aWNlIH0gZnJvbSAnLi9qb3lyaWRlLXN0ZXAuc2VydmljZSc7XG5pbXBvcnQgeyBKb3lyaWRlT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuL2pveXJpZGUtb3B0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IEpveXJpZGVPcHRpb25zIH0gZnJvbSAnLi4vbW9kZWxzL2pveXJpZGUtb3B0aW9ucy5jbGFzcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBKb3lyaWRlU3RlcEluZm8gfSBmcm9tICcuLi9tb2RlbHMvam95cmlkZS1zdGVwLWluZm8uY2xhc3MnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSm95cmlkZVNlcnZpY2Uge1xuICAgIHByaXZhdGUgdG91ckluUHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIHRvdXIkOiBPYnNlcnZhYmxlPEpveXJpZGVTdGVwSW5mbz47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc3RlcFNlcnZpY2U6IEpveXJpZGVTdGVwU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zU2VydmljZTogSm95cmlkZU9wdGlvbnNTZXJ2aWNlXG4gICAgKSB7fVxuXG4gICAgc3RhcnRUb3VyKG9wdGlvbnM/OiBKb3lyaWRlT3B0aW9ucyk6IE9ic2VydmFibGU8Sm95cmlkZVN0ZXBJbmZvPiB7XG4gICAgICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9mKG5ldyBKb3lyaWRlU3RlcEluZm8oKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnRvdXJJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnRvdXJJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zU2VydmljZS5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50b3VyJCA9IHRoaXMuc3RlcFNlcnZpY2Uuc3RhcnRUb3VyKCkucGlwZShmaW5hbGl6ZSgoKSA9PiAodGhpcy50b3VySW5Qcm9ncmVzcyA9IGZhbHNlKSkpO1xuICAgICAgICAgICAgdGhpcy50b3VyJC5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50b3VyJDtcbiAgICB9XG5cbiAgICBjbG9zZVRvdXIoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmlzVG91ckluUHJvZ3Jlc3MoKSkgdGhpcy5zdGVwU2VydmljZS5jbG9zZSgpO1xuICAgIH1cblxuICAgIGlzVG91ckluUHJvZ3Jlc3MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvdXJJblByb2dyZXNzO1xuICAgIH1cbn1cbiJdfQ==