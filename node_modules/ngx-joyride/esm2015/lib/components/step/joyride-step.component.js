import { __decorate } from "tslib";
import { Component, Input, AfterViewInit, ViewEncapsulation, OnInit, OnDestroy, ElementRef, ViewChild, Renderer2, Injector, TemplateRef } from '@angular/core';
import { JoyrideStepService, ARROW_SIZE, DISTANCE_FROM_TARGET } from '../../services';
import { JoyrideStepsContainerService } from '../../services/joyride-steps-container.service';
import { EventListenerService } from '../../services/event-listener.service';
import { DocumentService } from '../../services/document.service';
import { JoyrideOptionsService } from '../../services/joyride-options.service';
import { LoggerService } from '../../services/logger.service';
import { TemplatesService } from '../../services/templates.service';
const STEP_MIN_WIDTH = 200;
const STEP_MAX_WIDTH = 400;
const CUSTOM_STEP_MAX_WIDTH_VW = 90;
const STEP_HEIGHT = 200;
const ASPECT_RATIO = 1.212;
export const DEFAULT_DISTANCE_FROM_MARGIN_TOP = 2;
export const DEFAULT_DISTANCE_FROM_MARGIN_LEFT = 2;
const DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM = 5;
const DEFAULT_DISTANCE_FROM_MARGIN_RIGHT = 5;
let JoyrideStepComponent = class JoyrideStepComponent {
    constructor(injector, stepsContainerService, eventListenerService, documentService, renderer, logger, optionsService, templateService) {
        this.injector = injector;
        this.stepsContainerService = stepsContainerService;
        this.eventListenerService = eventListenerService;
        this.documentService = documentService;
        this.renderer = renderer;
        this.logger = logger;
        this.optionsService = optionsService;
        this.templateService = templateService;
        this.stepWidth = STEP_MIN_WIDTH;
        this.stepHeight = STEP_HEIGHT;
        this.showArrow = true;
        this.arrowSize = ARROW_SIZE;
        this.subscriptions = [];
    }
    ngOnInit() {
        // Need to Inject here otherwise you will obtain a circular dependency
        this.joyrideStepService = this.injector.get(JoyrideStepService);
        this.documentHeight = this.documentService.getDocumentHeight();
        this.subscriptions.push(this.subscribeToResizeEvents());
        this.title = this.step.title.asObservable();
        this.text = this.step.text.asObservable();
        this.setCustomTemplates();
        this.setCustomTexts();
        this.counter = this.getCounter();
        this.isCounterVisible = this.optionsService.isCounterVisible();
        this.isPrevButtonVisible = this.optionsService.isPrevButtonVisible();
        this.themeColor = this.optionsService.getThemeColor();
        if (this.text)
            this.text.subscribe(val => this.checkRedraw(val));
        if (this.title)
            this.title.subscribe(val => this.checkRedraw(val));
    }
    ngAfterViewInit() {
        if (this.isCustomized()) {
            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', CUSTOM_STEP_MAX_WIDTH_VW + 'vw');
            this.updateStepDimensions();
        }
        else {
            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', STEP_MAX_WIDTH + 'px');
            let dimensions = this.getDimensionsByAspectRatio(this.stepContainer.nativeElement.clientWidth, this.stepContainer.nativeElement.clientHeight, ASPECT_RATIO);
            dimensions = this.adjustDimensions(dimensions.width, dimensions.height);
            this.stepWidth = dimensions.width;
            this.stepHeight = dimensions.height;
            this.renderer.setStyle(this.stepContainer.nativeElement, 'width', this.stepWidth + 'px');
            this.renderer.setStyle(this.stepContainer.nativeElement, 'height', this.stepHeight + 'px');
        }
        this.drawStep();
    }
    checkRedraw(val) {
        if (val != null) {
            // Need to wait that the change is rendered before redrawing
            setTimeout(() => {
                this.redrawStep();
            }, 2);
        }
    }
    isCustomized() {
        return (this.step.stepContent ||
            this.templateService.getCounter() ||
            this.templateService.getPrevButton() ||
            this.templateService.getNextButton() ||
            this.templateService.getDoneButton());
    }
    setCustomTexts() {
        const customeTexts = this.optionsService.getCustomTexts();
        this.prevText = customeTexts.prev;
        this.nextText = customeTexts.next;
        this.doneText = customeTexts.done;
    }
    drawStep() {
        let position = this.step.isElementOrAncestorFixed
            ? 'fixed'
            : 'absolute';
        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', position);
        this.renderer.setStyle(this.stepHolder.nativeElement, 'transform', this.step.transformCssStyle);
        this.targetWidth = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().width;
        this.targetHeight = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().height;
        this.targetAbsoluteLeft =
            position === 'fixed'
                ? this.documentService.getElementFixedLeft(this.step.targetViewContainer.element)
                : this.documentService.getElementAbsoluteLeft(this.step.targetViewContainer.element);
        this.targetAbsoluteTop =
            position === 'fixed'
                ? this.documentService.getElementFixedTop(this.step.targetViewContainer.element)
                : this.documentService.getElementAbsoluteTop(this.step.targetViewContainer.element);
        this.setStepStyle();
    }
    getCounter() {
        let stepPosition = this.stepsContainerService.getStepNumber(this.step.name);
        let numberOfSteps = this.stepsContainerService.getStepsCount();
        this.counterData = { step: stepPosition, total: numberOfSteps };
        return stepPosition + '/' + numberOfSteps;
    }
    setCustomTemplates() {
        this.customContent = this.step.stepContent;
        this.ctx = this.step.stepContentParams;
        this.customPrevButton = this.templateService.getPrevButton();
        this.customNextButton = this.templateService.getNextButton();
        this.customDoneButton = this.templateService.getDoneButton();
        this.customCounter = this.templateService.getCounter();
    }
    prev() {
        this.joyrideStepService.prev();
    }
    next() {
        this.joyrideStepService.next();
    }
    close() {
        this.joyrideStepService.close();
    }
    isFirstStep() {
        return this.stepsContainerService.getStepNumber(this.step.name) === 1;
    }
    isLastStep() {
        return (this.stepsContainerService.getStepNumber(this.step.name) ===
            this.stepsContainerService.getStepsCount());
    }
    setStepStyle() {
        switch (this.step.position) {
            case 'top': {
                this.setStyleTop();
                break;
            }
            case 'bottom': {
                this.setStyleBottom();
                break;
            }
            case 'right': {
                this.setStyleRight();
                break;
            }
            case 'left': {
                this.setStyleLeft();
                break;
            }
            case 'center': {
                this.setStyleCenter();
                break;
            }
            default: {
                this.setStyleBottom();
            }
        }
    }
    setStyleTop() {
        this.stepsContainerService.updatePosition(this.step.name, 'top');
        this.topPosition =
            this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;
        this.arrowTopPosition = this.stepHeight;
        this.leftPosition =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.stepAbsoluteLeft =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;
        this.adjustLeftPosition();
        this.adjustRightPosition();
        this.arrowPosition = 'bottom';
        this.autofixTopPosition();
    }
    setStyleRight() {
        this.stepsContainerService.updatePosition(this.step.name, 'right');
        this.topPosition =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;
        this.leftPosition =
            this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;
        this.stepAbsoluteLeft =
            this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;
        this.arrowLeftPosition = -this.arrowSize;
        this.adjustTopPosition();
        this.adjustBottomPosition();
        this.arrowPosition = 'left';
        this.autofixRightPosition();
    }
    setStyleBottom() {
        this.stepsContainerService.updatePosition(this.step.name, 'bottom');
        this.topPosition =
            this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;
        this.arrowTopPosition = -this.arrowSize;
        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;
        this.leftPosition =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.stepAbsoluteLeft =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.adjustLeftPosition();
        this.adjustRightPosition();
        this.arrowPosition = 'top';
        this.autofixBottomPosition();
    }
    setStyleLeft() {
        this.stepsContainerService.updatePosition(this.step.name, 'left');
        this.topPosition =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;
        this.leftPosition =
            this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;
        this.stepAbsoluteLeft =
            this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;
        this.arrowLeftPosition = this.stepWidth;
        this.adjustTopPosition();
        this.adjustBottomPosition();
        this.arrowPosition = 'right';
        this.autofixLeftPosition();
    }
    setStyleCenter() {
        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', 'fixed');
        this.renderer.setStyle(this.stepHolder.nativeElement, 'top', '50%');
        this.renderer.setStyle(this.stepHolder.nativeElement, 'left', '50%');
        this.updateStepDimensions();
        this.renderer.setStyle(this.stepHolder.nativeElement, 'transform', `translate(-${this.stepWidth / 2}px, -${this.stepHeight / 2}px)`);
        this.showArrow = false;
    }
    adjustLeftPosition() {
        if (this.leftPosition < 0) {
            this.arrowLeftPosition =
                this.arrowLeftPosition +
                    this.leftPosition -
                    DEFAULT_DISTANCE_FROM_MARGIN_LEFT;
            this.leftPosition = DEFAULT_DISTANCE_FROM_MARGIN_LEFT;
        }
    }
    adjustRightPosition() {
        let currentWindowWidth = document.body.clientWidth;
        if (this.stepAbsoluteLeft + this.stepWidth > currentWindowWidth) {
            let newLeftPos = this.leftPosition -
                (this.stepAbsoluteLeft +
                    this.stepWidth +
                    DEFAULT_DISTANCE_FROM_MARGIN_RIGHT -
                    currentWindowWidth);
            let deltaLeftPosition = newLeftPos - this.leftPosition;
            this.leftPosition = newLeftPos;
            this.arrowLeftPosition = this.arrowLeftPosition - deltaLeftPosition;
        }
    }
    adjustTopPosition() {
        if (this.stepAbsoluteTop < 0) {
            this.arrowTopPosition =
                this.arrowTopPosition +
                    this.topPosition -
                    DEFAULT_DISTANCE_FROM_MARGIN_TOP;
            this.topPosition = DEFAULT_DISTANCE_FROM_MARGIN_TOP;
        }
    }
    adjustBottomPosition() {
        if (this.stepAbsoluteTop + this.stepHeight > this.documentHeight) {
            let newTopPos = this.topPosition -
                (this.stepAbsoluteTop +
                    this.stepHeight +
                    DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM -
                    this.documentHeight);
            let deltaTopPosition = newTopPos - this.topPosition;
            this.topPosition = newTopPos;
            this.arrowTopPosition = this.arrowTopPosition - deltaTopPosition;
        }
    }
    autofixTopPosition() {
        if (this.positionAlreadyFixed) {
            this.logger.warn('No step positions found for this step. The step will be centered.');
        }
        else if (this.targetAbsoluteTop - this.stepHeight - this.arrowSize <
            0) {
            this.positionAlreadyFixed = true;
            this.setStyleRight();
        }
    }
    autofixRightPosition() {
        if (this.targetAbsoluteLeft +
            this.targetWidth +
            this.stepWidth +
            this.arrowSize >
            document.body.clientWidth) {
            this.setStyleBottom();
        }
    }
    autofixBottomPosition() {
        if (this.targetAbsoluteTop +
            this.stepHeight +
            this.arrowSize +
            this.targetHeight >
            this.documentHeight) {
            this.setStyleLeft();
        }
    }
    autofixLeftPosition() {
        if (this.targetAbsoluteLeft - this.stepWidth - this.arrowSize < 0) {
            this.setStyleTop();
        }
    }
    subscribeToResizeEvents() {
        return this.eventListenerService.resizeEvent.subscribe(() => {
            this.redrawStep();
        });
    }
    redrawStep() {
        this.updateStepDimensions();
        this.drawStep();
    }
    getDimensionsByAspectRatio(width, height, aspectRatio) {
        let calcHeight = (width + height) / (1 + aspectRatio);
        let calcWidth = calcHeight * aspectRatio;
        return {
            width: calcWidth,
            height: calcHeight
        };
    }
    adjustDimensions(width, height) {
        let area = width * height;
        let newWidth = width;
        let newHeight = height;
        if (width > STEP_MAX_WIDTH) {
            newWidth = STEP_MAX_WIDTH;
            newHeight = area / newWidth;
        }
        else if (width < STEP_MIN_WIDTH) {
            newWidth = STEP_MIN_WIDTH;
            newHeight = STEP_MIN_WIDTH / ASPECT_RATIO;
        }
        return {
            width: newWidth,
            height: newHeight
        };
    }
    updateStepDimensions() {
        this.stepWidth = this.stepContainer.nativeElement.clientWidth;
        this.stepHeight = this.stepContainer.nativeElement.clientHeight;
    }
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => {
            subscription.unsubscribe();
        });
    }
};
JoyrideStepComponent.ctorParameters = () => [
    { type: Injector },
    { type: JoyrideStepsContainerService },
    { type: EventListenerService },
    { type: DocumentService },
    { type: Renderer2 },
    { type: LoggerService },
    { type: JoyrideOptionsService },
    { type: TemplatesService }
];
__decorate([
    Input()
], JoyrideStepComponent.prototype, "step", void 0);
__decorate([
    ViewChild('stepHolder', { static: true })
], JoyrideStepComponent.prototype, "stepHolder", void 0);
__decorate([
    ViewChild('stepContainer', { static: true })
], JoyrideStepComponent.prototype, "stepContainer", void 0);
JoyrideStepComponent = __decorate([
    Component({
        selector: 'joyride-step',
        template: "<div #stepHolder class=\"joyride-step__holder\" [id]=\"'joyride-step-' + step.name\" [style.top.px]=\"topPosition\" [style.left.px]=\"leftPosition\">\n    <joyride-arrow *ngIf=\"showArrow\" class=\"joyride-step__arrow\" [position]=\"arrowPosition\" [style.top.px]=\"arrowTopPosition\"\n        [style.left.px]=\"arrowLeftPosition\"></joyride-arrow>\n    <div #stepContainer class=\"joyride-step__container\">\n        <joy-close-button class=\"joyride-step__close\" (click)=\"close()\"></joy-close-button>\n        <div class=\"joyride-step__header\">\n            <div class=\"joyride-step__title\" [style.color]=\"themeColor\">{{ title | async }}</div>\n        </div>\n        <div class=\"joyride-step__body\">\n            <ng-container *ngTemplateOutlet=\"customContent ? customContent : defaultContent; context: ctx\"></ng-container>\n            <ng-template #defaultContent>\n                {{ text | async }}\n            </ng-template>\n        </div>\n        <div class=\"joyride-step__footer\">\n            <div *ngIf=\"isCounterVisible\" class=\"joyride-step__counter-container\">\n                <ng-container *ngTemplateOutlet=\"customCounter ? customCounter : defaultCounter; context: counterData\"></ng-container>\n                <ng-template #defaultCounter>\n                    <div class=\"joyride-step__counter\">{{ counter }}</div>\n                </ng-template>\n            </div>\n            <div class=\"joyride-step__buttons-container\">\n                <div class=\"joyride-step__prev-container joyride-step__button\" *ngIf=\"isPrevButtonVisible && !isFirstStep()\" (click)=\"prev()\">\n                    <ng-container *ngTemplateOutlet=\"customPrevButton ? customPrevButton : defaultPrevButton\"></ng-container>\n                    <ng-template #defaultPrevButton>\n                        <joyride-button class=\"joyride-step__prev-button\" [color]=\"themeColor\">{{ prevText | async }}</joyride-button>\n                    </ng-template>\n                </div>\n                <div class=\"joyride-step__next-container joyride-step__button\" *ngIf=\"!isLastStep(); else doneButton\" (click)=\"next()\">\n                    <ng-container *ngTemplateOutlet=\"customNextButton ? customNextButton : defaulNextButton\"></ng-container>\n                    <ng-template #defaulNextButton>\n                        <joyride-button [color]=\"themeColor\">{{ nextText | async }}</joyride-button>\n                    </ng-template>\n                </div>\n                <ng-template #doneButton>\n                    <div class=\"joyride-step__done-container joyride-step__button\" (click)=\"close()\">\n                        <ng-container *ngTemplateOutlet=\"customDoneButton ? customDoneButton : defaultDoneButton\"></ng-container>\n                        <ng-template #defaultDoneButton>\n                            <joyride-button class=\"joyride-step__done-button\" [color]=\"themeColor\">{{ doneText | async }}</joyride-button>\n                        </ng-template>\n                    </div>\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>",
        encapsulation: ViewEncapsulation.None,
        styles: [".joyride-step__holder{position:absolute;font-family:Arial,Helvetica,sans-serif;font-size:16px;z-index:1001}.joyride-step__arrow{position:absolute;left:40px;z-index:1002}.joyride-step__container{box-sizing:border-box;position:relative;color:#000;background-color:#fff;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:justify;justify-content:space-between;padding:10px;box-shadow:0 0 30px 1px #000}.joyride-step__header{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;padding:8px}.joyride-step__title{font-weight:700;font-size:20px}.joyride-step__close{position:absolute;right:10px;top:10px;width:14px;height:14px;cursor:pointer}.joyride-step__body{text-align:left;padding:10px 8px}.joyride-step__footer{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center;padding-left:8px}.joyride-step__buttons-container{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.joyride-step__button:first-child{margin-right:2.5px}.joyride-step__button:last-child{margin-left:2.5px}.joyride-step__counter{font-weight:700;font-size:14px}.joyride-step__counter-container{margin-right:10px}"]
    })
], JoyrideStepComponent);
export { JoyrideStepComponent };
//# sourceMappingURL=data:application/json;base64,