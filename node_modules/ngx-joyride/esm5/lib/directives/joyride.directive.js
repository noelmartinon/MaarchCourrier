import { __decorate, __param } from "tslib";
import { Directive, ElementRef, AfterViewInit, Input, ViewContainerRef, TemplateRef, Output, EventEmitter, Inject, PLATFORM_ID, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { JoyrideStep } from '../models/joyride-step.class';
import { JoyrideStepsContainerService } from '../services/joyride-steps-container.service';
import { JoyrideError } from '../models/joyride-error.class';
import { Router } from '@angular/router';
import { DomRefService } from '../services/dom.service';
import { isPlatformBrowser } from '@angular/common';
import { TemplatesService } from '../services/templates.service';
import { Observable } from 'rxjs';
export var NO_POSITION = 'NO_POSITION';
var JoyrideDirective = /** @class */ (function () {
    function JoyrideDirective(joyrideStepsContainer, viewContainerRef, domService, router, templateService, platformId) {
        this.joyrideStepsContainer = joyrideStepsContainer;
        this.viewContainerRef = viewContainerRef;
        this.domService = domService;
        this.router = router;
        this.templateService = templateService;
        this.platformId = platformId;
        this.stepPosition = NO_POSITION;
        this.prev = new EventEmitter();
        this.next = new EventEmitter();
        this.done = new EventEmitter();
        this.subscriptions = [];
        this.windowRef = this.domService.getNativeWindow();
        this.step = new JoyrideStep();
    }
    JoyrideDirective.prototype.ngAfterViewInit = function () {
        if (!isPlatformBrowser(this.platformId))
            return;
        if (this.prevTemplate)
            this.templateService.setPrevButton(this.prevTemplate);
        if (this.nextTemplate)
            this.templateService.setNextButton(this.nextTemplate);
        if (this.doneTemplate)
            this.templateService.setDoneButton(this.doneTemplate);
        if (this.counterTemplate)
            this.templateService.setCounter(this.counterTemplate);
        this.step.position = this.stepPosition;
        this.step.targetViewContainer = this.viewContainerRef;
        this.setAsyncFields(this.step);
        this.step.stepContent = this.stepContent;
        this.step.stepContentParams = this.stepContentParams;
        this.step.nextClicked = this.next;
        this.step.prevCliked = this.prev;
        this.step.tourDone = this.done;
        if (!this.name)
            throw new JoyrideError("All the steps should have the 'joyrideStep' property set with a custom name.");
        this.step.name = this.name;
        this.step.route = this.router.url.substr(0, 1) === '/' ? this.router.url.substr(1) : this.router.url;
        this.step.transformCssStyle = this.windowRef.getComputedStyle(this.viewContainerRef.element.nativeElement).transform;
        this.step.isElementOrAncestorFixed =
            this.isElementFixed(this.viewContainerRef.element) ||
                this.isAncestorsFixed(this.viewContainerRef.element.nativeElement.parentElement);
        this.joyrideStepsContainer.addStep(this.step);
    };
    JoyrideDirective.prototype.ngOnChanges = function (changes) {
        if (changes['title'] || changes['text']) {
            this.setAsyncFields(this.step);
        }
    };
    JoyrideDirective.prototype.isElementFixed = function (element) {
        return this.windowRef.getComputedStyle(element.nativeElement).position === 'fixed';
    };
    JoyrideDirective.prototype.setAsyncFields = function (step) {
        if (this.title instanceof Observable) {
            this.subscriptions.push(this.title.subscribe(function (title) {
                step.title.next(title);
            }));
        }
        else {
            step.title.next(this.title);
        }
        if (this.text instanceof Observable) {
            this.subscriptions.push(this.text.subscribe(function (text) {
                step.text.next(text);
            }));
        }
        else {
            step.text.next(this.text);
        }
    };
    JoyrideDirective.prototype.isAncestorsFixed = function (nativeElement) {
        if (!nativeElement || !nativeElement.parentElement)
            return false;
        var isElementFixed = this.windowRef.getComputedStyle(nativeElement.parentElement).position === 'fixed';
        if (nativeElement.nodeName === 'BODY') {
            return isElementFixed;
        }
        if (isElementFixed)
            return true;
        else
            return this.isAncestorsFixed(nativeElement.parentElement);
    };
    JoyrideDirective.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) {
            sub.unsubscribe();
        });
    };
    JoyrideDirective.ctorParameters = function () { return [
        { type: JoyrideStepsContainerService },
        { type: ViewContainerRef },
        { type: DomRefService },
        { type: Router },
        { type: TemplatesService },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input('joyrideStep')
    ], JoyrideDirective.prototype, "name", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "nextStep", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "title", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "text", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "stepPosition", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "stepContent", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "stepContentParams", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "prevTemplate", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "nextTemplate", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "doneTemplate", void 0);
    __decorate([
        Input()
    ], JoyrideDirective.prototype, "counterTemplate", void 0);
    __decorate([
        Output()
    ], JoyrideDirective.prototype, "prev", void 0);
    __decorate([
        Output()
    ], JoyrideDirective.prototype, "next", void 0);
    __decorate([
        Output()
    ], JoyrideDirective.prototype, "done", void 0);
    JoyrideDirective = __decorate([
        Directive({
            selector: 'joyrideStep, [joyrideStep]'
        }),
        __param(5, Inject(PLATFORM_ID))
    ], JoyrideDirective);
    return JoyrideDirective;
}());
export { JoyrideDirective };
//# sourceMappingURL=data:application/json;base64,