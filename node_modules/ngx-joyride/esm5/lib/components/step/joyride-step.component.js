import { __decorate } from "tslib";
import { Component, Input, AfterViewInit, ViewEncapsulation, OnInit, OnDestroy, ElementRef, ViewChild, Renderer2, Injector, TemplateRef } from '@angular/core';
import { JoyrideStepService, ARROW_SIZE, DISTANCE_FROM_TARGET } from '../../services';
import { JoyrideStepsContainerService } from '../../services/joyride-steps-container.service';
import { EventListenerService } from '../../services/event-listener.service';
import { DocumentService } from '../../services/document.service';
import { JoyrideOptionsService } from '../../services/joyride-options.service';
import { LoggerService } from '../../services/logger.service';
import { TemplatesService } from '../../services/templates.service';
var STEP_MIN_WIDTH = 200;
var STEP_MAX_WIDTH = 400;
var CUSTOM_STEP_MAX_WIDTH_VW = 90;
var STEP_HEIGHT = 200;
var ASPECT_RATIO = 1.212;
export var DEFAULT_DISTANCE_FROM_MARGIN_TOP = 2;
export var DEFAULT_DISTANCE_FROM_MARGIN_LEFT = 2;
var DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM = 5;
var DEFAULT_DISTANCE_FROM_MARGIN_RIGHT = 5;
var JoyrideStepComponent = /** @class */ (function () {
    function JoyrideStepComponent(injector, stepsContainerService, eventListenerService, documentService, renderer, logger, optionsService, templateService) {
        this.injector = injector;
        this.stepsContainerService = stepsContainerService;
        this.eventListenerService = eventListenerService;
        this.documentService = documentService;
        this.renderer = renderer;
        this.logger = logger;
        this.optionsService = optionsService;
        this.templateService = templateService;
        this.stepWidth = STEP_MIN_WIDTH;
        this.stepHeight = STEP_HEIGHT;
        this.showArrow = true;
        this.arrowSize = ARROW_SIZE;
        this.subscriptions = [];
    }
    JoyrideStepComponent.prototype.ngOnInit = function () {
        var _this = this;
        // Need to Inject here otherwise you will obtain a circular dependency
        this.joyrideStepService = this.injector.get(JoyrideStepService);
        this.documentHeight = this.documentService.getDocumentHeight();
        this.subscriptions.push(this.subscribeToResizeEvents());
        this.title = this.step.title.asObservable();
        this.text = this.step.text.asObservable();
        this.setCustomTemplates();
        this.setCustomTexts();
        this.counter = this.getCounter();
        this.isCounterVisible = this.optionsService.isCounterVisible();
        this.isPrevButtonVisible = this.optionsService.isPrevButtonVisible();
        this.themeColor = this.optionsService.getThemeColor();
        if (this.text)
            this.text.subscribe(function (val) { return _this.checkRedraw(val); });
        if (this.title)
            this.title.subscribe(function (val) { return _this.checkRedraw(val); });
    };
    JoyrideStepComponent.prototype.ngAfterViewInit = function () {
        if (this.isCustomized()) {
            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', CUSTOM_STEP_MAX_WIDTH_VW + 'vw');
            this.updateStepDimensions();
        }
        else {
            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', STEP_MAX_WIDTH + 'px');
            var dimensions = this.getDimensionsByAspectRatio(this.stepContainer.nativeElement.clientWidth, this.stepContainer.nativeElement.clientHeight, ASPECT_RATIO);
            dimensions = this.adjustDimensions(dimensions.width, dimensions.height);
            this.stepWidth = dimensions.width;
            this.stepHeight = dimensions.height;
            this.renderer.setStyle(this.stepContainer.nativeElement, 'width', this.stepWidth + 'px');
            this.renderer.setStyle(this.stepContainer.nativeElement, 'height', this.stepHeight + 'px');
        }
        this.drawStep();
    };
    JoyrideStepComponent.prototype.checkRedraw = function (val) {
        var _this = this;
        if (val != null) {
            // Need to wait that the change is rendered before redrawing
            setTimeout(function () {
                _this.redrawStep();
            }, 2);
        }
    };
    JoyrideStepComponent.prototype.isCustomized = function () {
        return (this.step.stepContent ||
            this.templateService.getCounter() ||
            this.templateService.getPrevButton() ||
            this.templateService.getNextButton() ||
            this.templateService.getDoneButton());
    };
    JoyrideStepComponent.prototype.setCustomTexts = function () {
        var customeTexts = this.optionsService.getCustomTexts();
        this.prevText = customeTexts.prev;
        this.nextText = customeTexts.next;
        this.doneText = customeTexts.done;
    };
    JoyrideStepComponent.prototype.drawStep = function () {
        var position = this.step.isElementOrAncestorFixed
            ? 'fixed'
            : 'absolute';
        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', position);
        this.renderer.setStyle(this.stepHolder.nativeElement, 'transform', this.step.transformCssStyle);
        this.targetWidth = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().width;
        this.targetHeight = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().height;
        this.targetAbsoluteLeft =
            position === 'fixed'
                ? this.documentService.getElementFixedLeft(this.step.targetViewContainer.element)
                : this.documentService.getElementAbsoluteLeft(this.step.targetViewContainer.element);
        this.targetAbsoluteTop =
            position === 'fixed'
                ? this.documentService.getElementFixedTop(this.step.targetViewContainer.element)
                : this.documentService.getElementAbsoluteTop(this.step.targetViewContainer.element);
        this.setStepStyle();
    };
    JoyrideStepComponent.prototype.getCounter = function () {
        var stepPosition = this.stepsContainerService.getStepNumber(this.step.name);
        var numberOfSteps = this.stepsContainerService.getStepsCount();
        this.counterData = { step: stepPosition, total: numberOfSteps };
        return stepPosition + '/' + numberOfSteps;
    };
    JoyrideStepComponent.prototype.setCustomTemplates = function () {
        this.customContent = this.step.stepContent;
        this.ctx = this.step.stepContentParams;
        this.customPrevButton = this.templateService.getPrevButton();
        this.customNextButton = this.templateService.getNextButton();
        this.customDoneButton = this.templateService.getDoneButton();
        this.customCounter = this.templateService.getCounter();
    };
    JoyrideStepComponent.prototype.prev = function () {
        this.joyrideStepService.prev();
    };
    JoyrideStepComponent.prototype.next = function () {
        this.joyrideStepService.next();
    };
    JoyrideStepComponent.prototype.close = function () {
        this.joyrideStepService.close();
    };
    JoyrideStepComponent.prototype.isFirstStep = function () {
        return this.stepsContainerService.getStepNumber(this.step.name) === 1;
    };
    JoyrideStepComponent.prototype.isLastStep = function () {
        return (this.stepsContainerService.getStepNumber(this.step.name) ===
            this.stepsContainerService.getStepsCount());
    };
    JoyrideStepComponent.prototype.setStepStyle = function () {
        switch (this.step.position) {
            case 'top': {
                this.setStyleTop();
                break;
            }
            case 'bottom': {
                this.setStyleBottom();
                break;
            }
            case 'right': {
                this.setStyleRight();
                break;
            }
            case 'left': {
                this.setStyleLeft();
                break;
            }
            case 'center': {
                this.setStyleCenter();
                break;
            }
            default: {
                this.setStyleBottom();
            }
        }
    };
    JoyrideStepComponent.prototype.setStyleTop = function () {
        this.stepsContainerService.updatePosition(this.step.name, 'top');
        this.topPosition =
            this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;
        this.arrowTopPosition = this.stepHeight;
        this.leftPosition =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.stepAbsoluteLeft =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;
        this.adjustLeftPosition();
        this.adjustRightPosition();
        this.arrowPosition = 'bottom';
        this.autofixTopPosition();
    };
    JoyrideStepComponent.prototype.setStyleRight = function () {
        this.stepsContainerService.updatePosition(this.step.name, 'right');
        this.topPosition =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;
        this.leftPosition =
            this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;
        this.stepAbsoluteLeft =
            this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;
        this.arrowLeftPosition = -this.arrowSize;
        this.adjustTopPosition();
        this.adjustBottomPosition();
        this.arrowPosition = 'left';
        this.autofixRightPosition();
    };
    JoyrideStepComponent.prototype.setStyleBottom = function () {
        this.stepsContainerService.updatePosition(this.step.name, 'bottom');
        this.topPosition =
            this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;
        this.arrowTopPosition = -this.arrowSize;
        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;
        this.leftPosition =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.stepAbsoluteLeft =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.adjustLeftPosition();
        this.adjustRightPosition();
        this.arrowPosition = 'top';
        this.autofixBottomPosition();
    };
    JoyrideStepComponent.prototype.setStyleLeft = function () {
        this.stepsContainerService.updatePosition(this.step.name, 'left');
        this.topPosition =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;
        this.leftPosition =
            this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;
        this.stepAbsoluteLeft =
            this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;
        this.arrowLeftPosition = this.stepWidth;
        this.adjustTopPosition();
        this.adjustBottomPosition();
        this.arrowPosition = 'right';
        this.autofixLeftPosition();
    };
    JoyrideStepComponent.prototype.setStyleCenter = function () {
        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', 'fixed');
        this.renderer.setStyle(this.stepHolder.nativeElement, 'top', '50%');
        this.renderer.setStyle(this.stepHolder.nativeElement, 'left', '50%');
        this.updateStepDimensions();
        this.renderer.setStyle(this.stepHolder.nativeElement, 'transform', "translate(-" + this.stepWidth / 2 + "px, -" + this.stepHeight / 2 + "px)");
        this.showArrow = false;
    };
    JoyrideStepComponent.prototype.adjustLeftPosition = function () {
        if (this.leftPosition < 0) {
            this.arrowLeftPosition =
                this.arrowLeftPosition +
                    this.leftPosition -
                    DEFAULT_DISTANCE_FROM_MARGIN_LEFT;
            this.leftPosition = DEFAULT_DISTANCE_FROM_MARGIN_LEFT;
        }
    };
    JoyrideStepComponent.prototype.adjustRightPosition = function () {
        var currentWindowWidth = document.body.clientWidth;
        if (this.stepAbsoluteLeft + this.stepWidth > currentWindowWidth) {
            var newLeftPos = this.leftPosition -
                (this.stepAbsoluteLeft +
                    this.stepWidth +
                    DEFAULT_DISTANCE_FROM_MARGIN_RIGHT -
                    currentWindowWidth);
            var deltaLeftPosition = newLeftPos - this.leftPosition;
            this.leftPosition = newLeftPos;
            this.arrowLeftPosition = this.arrowLeftPosition - deltaLeftPosition;
        }
    };
    JoyrideStepComponent.prototype.adjustTopPosition = function () {
        if (this.stepAbsoluteTop < 0) {
            this.arrowTopPosition =
                this.arrowTopPosition +
                    this.topPosition -
                    DEFAULT_DISTANCE_FROM_MARGIN_TOP;
            this.topPosition = DEFAULT_DISTANCE_FROM_MARGIN_TOP;
        }
    };
    JoyrideStepComponent.prototype.adjustBottomPosition = function () {
        if (this.stepAbsoluteTop + this.stepHeight > this.documentHeight) {
            var newTopPos = this.topPosition -
                (this.stepAbsoluteTop +
                    this.stepHeight +
                    DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM -
                    this.documentHeight);
            var deltaTopPosition = newTopPos - this.topPosition;
            this.topPosition = newTopPos;
            this.arrowTopPosition = this.arrowTopPosition - deltaTopPosition;
        }
    };
    JoyrideStepComponent.prototype.autofixTopPosition = function () {
        if (this.positionAlreadyFixed) {
            this.logger.warn('No step positions found for this step. The step will be centered.');
        }
        else if (this.targetAbsoluteTop - this.stepHeight - this.arrowSize <
            0) {
            this.positionAlreadyFixed = true;
            this.setStyleRight();
        }
    };
    JoyrideStepComponent.prototype.autofixRightPosition = function () {
        if (this.targetAbsoluteLeft +
            this.targetWidth +
            this.stepWidth +
            this.arrowSize >
            document.body.clientWidth) {
            this.setStyleBottom();
        }
    };
    JoyrideStepComponent.prototype.autofixBottomPosition = function () {
        if (this.targetAbsoluteTop +
            this.stepHeight +
            this.arrowSize +
            this.targetHeight >
            this.documentHeight) {
            this.setStyleLeft();
        }
    };
    JoyrideStepComponent.prototype.autofixLeftPosition = function () {
        if (this.targetAbsoluteLeft - this.stepWidth - this.arrowSize < 0) {
            this.setStyleTop();
        }
    };
    JoyrideStepComponent.prototype.subscribeToResizeEvents = function () {
        var _this = this;
        return this.eventListenerService.resizeEvent.subscribe(function () {
            _this.redrawStep();
        });
    };
    JoyrideStepComponent.prototype.redrawStep = function () {
        this.updateStepDimensions();
        this.drawStep();
    };
    JoyrideStepComponent.prototype.getDimensionsByAspectRatio = function (width, height, aspectRatio) {
        var calcHeight = (width + height) / (1 + aspectRatio);
        var calcWidth = calcHeight * aspectRatio;
        return {
            width: calcWidth,
            height: calcHeight
        };
    };
    JoyrideStepComponent.prototype.adjustDimensions = function (width, height) {
        var area = width * height;
        var newWidth = width;
        var newHeight = height;
        if (width > STEP_MAX_WIDTH) {
            newWidth = STEP_MAX_WIDTH;
            newHeight = area / newWidth;
        }
        else if (width < STEP_MIN_WIDTH) {
            newWidth = STEP_MIN_WIDTH;
            newHeight = STEP_MIN_WIDTH / ASPECT_RATIO;
        }
        return {
            width: newWidth,
            height: newHeight
        };
    };
    JoyrideStepComponent.prototype.updateStepDimensions = function () {
        this.stepWidth = this.stepContainer.nativeElement.clientWidth;
        this.stepHeight = this.stepContainer.nativeElement.clientHeight;
    };
    JoyrideStepComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
    };
    JoyrideStepComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: JoyrideStepsContainerService },
        { type: EventListenerService },
        { type: DocumentService },
        { type: Renderer2 },
        { type: LoggerService },
        { type: JoyrideOptionsService },
        { type: TemplatesService }
    ]; };
    __decorate([
        Input()
    ], JoyrideStepComponent.prototype, "step", void 0);
    __decorate([
        ViewChild('stepHolder', { static: true })
    ], JoyrideStepComponent.prototype, "stepHolder", void 0);
    __decorate([
        ViewChild('stepContainer', { static: true })
    ], JoyrideStepComponent.prototype, "stepContainer", void 0);
    JoyrideStepComponent = __decorate([
        Component({
            selector: 'joyride-step',
            template: "<div #stepHolder class=\"joyride-step__holder\" [id]=\"'joyride-step-' + step.name\" [style.top.px]=\"topPosition\" [style.left.px]=\"leftPosition\">\n    <joyride-arrow *ngIf=\"showArrow\" class=\"joyride-step__arrow\" [position]=\"arrowPosition\" [style.top.px]=\"arrowTopPosition\"\n        [style.left.px]=\"arrowLeftPosition\"></joyride-arrow>\n    <div #stepContainer class=\"joyride-step__container\">\n        <joy-close-button class=\"joyride-step__close\" (click)=\"close()\"></joy-close-button>\n        <div class=\"joyride-step__header\">\n            <div class=\"joyride-step__title\" [style.color]=\"themeColor\">{{ title | async }}</div>\n        </div>\n        <div class=\"joyride-step__body\">\n            <ng-container *ngTemplateOutlet=\"customContent ? customContent : defaultContent; context: ctx\"></ng-container>\n            <ng-template #defaultContent>\n                {{ text | async }}\n            </ng-template>\n        </div>\n        <div class=\"joyride-step__footer\">\n            <div *ngIf=\"isCounterVisible\" class=\"joyride-step__counter-container\">\n                <ng-container *ngTemplateOutlet=\"customCounter ? customCounter : defaultCounter; context: counterData\"></ng-container>\n                <ng-template #defaultCounter>\n                    <div class=\"joyride-step__counter\">{{ counter }}</div>\n                </ng-template>\n            </div>\n            <div class=\"joyride-step__buttons-container\">\n                <div class=\"joyride-step__prev-container joyride-step__button\" *ngIf=\"isPrevButtonVisible && !isFirstStep()\" (click)=\"prev()\">\n                    <ng-container *ngTemplateOutlet=\"customPrevButton ? customPrevButton : defaultPrevButton\"></ng-container>\n                    <ng-template #defaultPrevButton>\n                        <joyride-button class=\"joyride-step__prev-button\" [color]=\"themeColor\">{{ prevText | async }}</joyride-button>\n                    </ng-template>\n                </div>\n                <div class=\"joyride-step__next-container joyride-step__button\" *ngIf=\"!isLastStep(); else doneButton\" (click)=\"next()\">\n                    <ng-container *ngTemplateOutlet=\"customNextButton ? customNextButton : defaulNextButton\"></ng-container>\n                    <ng-template #defaulNextButton>\n                        <joyride-button [color]=\"themeColor\">{{ nextText | async }}</joyride-button>\n                    </ng-template>\n                </div>\n                <ng-template #doneButton>\n                    <div class=\"joyride-step__done-container joyride-step__button\" (click)=\"close()\">\n                        <ng-container *ngTemplateOutlet=\"customDoneButton ? customDoneButton : defaultDoneButton\"></ng-container>\n                        <ng-template #defaultDoneButton>\n                            <joyride-button class=\"joyride-step__done-button\" [color]=\"themeColor\">{{ doneText | async }}</joyride-button>\n                        </ng-template>\n                    </div>\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>",
            encapsulation: ViewEncapsulation.None,
            styles: [".joyride-step__holder{position:absolute;font-family:Arial,Helvetica,sans-serif;font-size:16px;z-index:1001}.joyride-step__arrow{position:absolute;left:40px;z-index:1002}.joyride-step__container{box-sizing:border-box;position:relative;color:#000;background-color:#fff;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:justify;justify-content:space-between;padding:10px;box-shadow:0 0 30px 1px #000}.joyride-step__header{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;padding:8px}.joyride-step__title{font-weight:700;font-size:20px}.joyride-step__close{position:absolute;right:10px;top:10px;width:14px;height:14px;cursor:pointer}.joyride-step__body{text-align:left;padding:10px 8px}.joyride-step__footer{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center;padding-left:8px}.joyride-step__buttons-container{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.joyride-step__button:first-child{margin-right:2.5px}.joyride-step__button:last-child{margin-left:2.5px}.joyride-step__counter{font-weight:700;font-size:14px}.joyride-step__counter-container{margin-right:10px}"]
        })
    ], JoyrideStepComponent);
    return JoyrideStepComponent;
}());
export { JoyrideStepComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS1zdGVwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1qb3lyaWRlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc3RlcC9qb3lyaWRlLXN0ZXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULEtBQUssRUFDTCxhQUFhLEVBQ2IsaUJBQWlCLEVBQ2pCLE1BQU0sRUFDTixTQUFTLEVBQ1QsVUFBVSxFQUNWLFNBQVMsRUFDVCxTQUFTLEVBQ1QsUUFBUSxFQUNSLFdBQVcsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLFVBQVUsRUFDVixvQkFBb0IsRUFFdkIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUM5RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUU3RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXBFLElBQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQztBQUMzQixJQUFNLGNBQWMsR0FBRyxHQUFHLENBQUM7QUFDM0IsSUFBTSx3QkFBd0IsR0FBRyxFQUFFLENBQUM7QUFDcEMsSUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQ3hCLElBQU0sWUFBWSxHQUFHLEtBQUssQ0FBQztBQUMzQixNQUFNLENBQUMsSUFBTSxnQ0FBZ0MsR0FBRyxDQUFDLENBQUM7QUFDbEQsTUFBTSxDQUFDLElBQU0saUNBQWlDLEdBQUcsQ0FBQyxDQUFDO0FBQ25ELElBQU0sbUNB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RUFBRSxJQUFJLEVBQUUsQ0FBQzs0REFBd0I7SUFDcEI7UUFBN0MsU0FBUyxDQUFDLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzsrREFBMkI7SUEzQy9ELG9CQUFvQjtRQU5oQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsY0FBYztZQUN4Qiwya0dBQTRDO1lBRTVDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztTQUN4QyxDQUFDO09BQ1csb0JBQW9CLENBOGVoQztJQUFELDJCQUFDO0NBQUEsQUE5ZUQsSUE4ZUM7U0E5ZVksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgSW5wdXQsXG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgICBPbkluaXQsXG4gICAgT25EZXN0cm95LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgVmlld0NoaWxkLFxuICAgIFJlbmRlcmVyMixcbiAgICBJbmplY3RvcixcbiAgICBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEpveXJpZGVTdGVwIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2pveXJpZGUtc3RlcC5jbGFzcyc7XG5pbXBvcnQge1xuICAgIEpveXJpZGVTdGVwU2VydmljZSxcbiAgICBBUlJPV19TSVpFLFxuICAgIERJU1RBTkNFX0ZST01fVEFSR0VULFxuICAgIElKb3lyaWRlU3RlcFNlcnZpY2Vcbn0gZnJvbSAnLi4vLi4vc2VydmljZXMnO1xuaW1wb3J0IHsgSm95cmlkZVN0ZXBzQ29udGFpbmVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2pveXJpZGUtc3RlcHMtY29udGFpbmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXZlbnRMaXN0ZW5lclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9ldmVudC1saXN0ZW5lci5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRG9jdW1lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZG9jdW1lbnQuc2VydmljZSc7XG5pbXBvcnQgeyBKb3lyaWRlT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9qb3lyaWRlLW9wdGlvbnMuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGVtcGxhdGVzU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RlbXBsYXRlcy5zZXJ2aWNlJztcblxuY29uc3QgU1RFUF9NSU5fV0lEVEggPSAyMDA7XG5jb25zdCBTVEVQX01BWF9XSURUSCA9IDQwMDtcbmNvbnN0IENVU1RPTV9TVEVQX01BWF9XSURUSF9WVyA9IDkwO1xuY29uc3QgU1RFUF9IRUlHSFQgPSAyMDA7XG5jb25zdCBBU1BFQ1RfUkFUSU8gPSAxLjIxMjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0RJU1RBTkNFX0ZST01fTUFSR0lOX1RPUCA9IDI7XG5leHBvcnQgY29uc3QgREVGQVVMVF9ESVNUQU5DRV9GUk9NX01BUkdJTl9MRUZUID0gMjtcbmNvbnN0IERFRkFVTFRfRElTVEFOQ0VfRlJPTV9NQVJHSU5fQk9UVE9NID0gNTtcbmNvbnN0IERFRkFVTFRfRElTVEFOQ0VfRlJPTV9NQVJHSU5fUklHSFQgPSA1O1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2pveXJpZGUtc3RlcCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2pveXJpZGUtc3RlcC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vam95cmlkZS1zdGVwLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBKb3lyaWRlU3RlcENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBzdGVwV2lkdGg6IG51bWJlciA9IFNURVBfTUlOX1dJRFRIO1xuICAgIHN0ZXBIZWlnaHQ6IG51bWJlciA9IFNURVBfSEVJR0hUO1xuICAgIGxlZnRQb3NpdGlvbjogbnVtYmVyO1xuICAgIHRvcFBvc2l0aW9uOiBudW1iZXI7XG4gICAgc2hvd0Fycm93ID0gdHJ1ZTtcbiAgICBhcnJvd1Bvc2l0aW9uOiBzdHJpbmc7XG4gICAgYXJyb3dMZWZ0UG9zaXRpb246IG51bWJlcjtcbiAgICBhcnJvd1RvcFBvc2l0aW9uOiBudW1iZXI7XG4gICAgdGl0bGU6IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICB0ZXh0OiBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgY291bnRlcjogc3RyaW5nO1xuICAgIGlzQ291bnRlclZpc2libGU6IGJvb2xlYW47XG4gICAgaXNQcmV2QnV0dG9uVmlzaWJsZTogYm9vbGVhbjtcbiAgICB0aGVtZUNvbG9yOiBzdHJpbmc7XG4gICAgY3VzdG9tQ29udGVudDogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjdXN0b21QcmV2QnV0dG9uOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGN1c3RvbU5leHRCdXR0b246IFRlbXBsYXRlUmVmPGFueT47XG4gICAgY3VzdG9tRG9uZUJ1dHRvbjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjdXN0b21Db3VudGVyOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGNvdW50ZXJEYXRhOiBhbnk7XG4gICAgY3R4OiBPYmplY3Q7XG5cbiAgICBwcml2YXRlIGFycm93U2l6ZTogbnVtYmVyID0gQVJST1dfU0laRTtcbiAgICBwcml2YXRlIHN0ZXBBYnNvbHV0ZUxlZnQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHN0ZXBBYnNvbHV0ZVRvcDogbnVtYmVyO1xuICAgIHByaXZhdGUgdGFyZ2V0V2lkdGg6IG51bWJlcjtcbiAgICB0YXJnZXRIZWlnaHQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHRhcmdldEFic29sdXRlTGVmdDogbnVtYmVyO1xuICAgIHByaXZhdGUgdGFyZ2V0QWJzb2x1dGVUb3A6IG51bWJlcjtcblxuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgICBqb3lyaWRlU3RlcFNlcnZpY2U6IElKb3lyaWRlU3RlcFNlcnZpY2U7XG5cbiAgICBwcml2YXRlIHBvc2l0aW9uQWxyZWFkeUZpeGVkOiBib29sZWFuO1xuICAgIHByaXZhdGUgZG9jdW1lbnRIZWlnaHQ6IG51bWJlcjtcblxuICAgIHByZXZUZXh0OiBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgbmV4dFRleHQ6IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICBkb25lVGV4dDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuXG4gICAgQElucHV0KCkgc3RlcD86IEpveXJpZGVTdGVwO1xuICAgIEBWaWV3Q2hpbGQoJ3N0ZXBIb2xkZXInLCB7IHN0YXRpYzogdHJ1ZSB9KSBzdGVwSG9sZGVyOiBFbGVtZW50UmVmO1xuICAgIEBWaWV3Q2hpbGQoJ3N0ZXBDb250YWluZXInLCB7IHN0YXRpYzogdHJ1ZSB9KSBzdGVwQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN0ZXBzQ29udGFpbmVyU2VydmljZTogSm95cmlkZVN0ZXBzQ29udGFpbmVyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBldmVudExpc3RlbmVyU2VydmljZTogRXZlbnRMaXN0ZW5lclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnRTZXJ2aWNlOiBEb2N1bWVudFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI6IExvZ2dlclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uc1NlcnZpY2U6IEpveXJpZGVPcHRpb25zU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSB0ZW1wbGF0ZVNlcnZpY2U6IFRlbXBsYXRlc1NlcnZpY2VcbiAgICApIHt9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgLy8gTmVlZCB0byBJbmplY3QgaGVyZSBvdGhlcndpc2UgeW91IHdpbGwgb2J0YWluIGEgY2lyY3VsYXIgZGVwZW5kZW5jeVxuICAgICAgICB0aGlzLmpveXJpZGVTdGVwU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KEpveXJpZGVTdGVwU2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5kb2N1bWVudEhlaWdodCA9IHRoaXMuZG9jdW1lbnRTZXJ2aWNlLmdldERvY3VtZW50SGVpZ2h0KCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuc3Vic2NyaWJlVG9SZXNpemVFdmVudHMoKSk7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLnN0ZXAudGl0bGUuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RlcC50ZXh0LmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0Q3VzdG9tVGVtcGxhdGVzKCk7XG4gICAgICAgIHRoaXMuc2V0Q3VzdG9tVGV4dHMoKTtcblxuICAgICAgICB0aGlzLmNvdW50ZXIgPSB0aGlzLmdldENvdW50ZXIoKTtcbiAgICAgICAgdGhpcy5pc0NvdW50ZXJWaXNpYmxlID0gdGhpcy5vcHRpb25zU2VydmljZS5pc0NvdW50ZXJWaXNpYmxlKCk7XG4gICAgICAgIHRoaXMuaXNQcmV2QnV0dG9uVmlzaWJsZSA9IHRoaXMub3B0aW9uc1NlcnZpY2UuaXNQcmV2QnV0dG9uVmlzaWJsZSgpO1xuICAgICAgICB0aGlzLnRoZW1lQ29sb3IgPSB0aGlzLm9wdGlvbnNTZXJ2aWNlLmdldFRoZW1lQ29sb3IoKTtcblxuICAgICAgICBpZiAodGhpcy50ZXh0KSB0aGlzLnRleHQuc3Vic2NyaWJlKHZhbCA9PiB0aGlzLmNoZWNrUmVkcmF3KHZhbCkpO1xuICAgICAgICBpZiAodGhpcy50aXRsZSkgdGhpcy50aXRsZS5zdWJzY3JpYmUodmFsID0+IHRoaXMuY2hlY2tSZWRyYXcodmFsKSk7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBpZiAodGhpcy5pc0N1c3RvbWl6ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgICAgICAgICAgICB0aGlzLnN0ZXBDb250YWluZXIubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAnbWF4LXdpZHRoJyxcbiAgICAgICAgICAgICAgICBDVVNUT01fU1RFUF9NQVhfV0lEVEhfVlcgKyAndncnXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGVwRGltZW5zaW9ucygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgICAgICAgICAgICB0aGlzLnN0ZXBDb250YWluZXIubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAnbWF4LXdpZHRoJyxcbiAgICAgICAgICAgICAgICBTVEVQX01BWF9XSURUSCArICdweCdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZXQgZGltZW5zaW9ucyA9IHRoaXMuZ2V0RGltZW5zaW9uc0J5QXNwZWN0UmF0aW8oXG4gICAgICAgICAgICAgICAgdGhpcy5zdGVwQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgdGhpcy5zdGVwQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgICAgIEFTUEVDVF9SQVRJT1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRpbWVuc2lvbnMgPSB0aGlzLmFkanVzdERpbWVuc2lvbnMoXG4gICAgICAgICAgICAgICAgZGltZW5zaW9ucy53aWR0aCxcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zLmhlaWdodFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcFdpZHRoID0gZGltZW5zaW9ucy53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuc3RlcEhlaWdodCA9IGRpbWVuc2lvbnMuaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgICAgICAgICAgICB0aGlzLnN0ZXBDb250YWluZXIubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAnd2lkdGgnLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RlcFdpZHRoICsgJ3B4J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG4gICAgICAgICAgICAgICAgdGhpcy5zdGVwQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgJ2hlaWdodCcsXG4gICAgICAgICAgICAgICAgdGhpcy5zdGVwSGVpZ2h0ICsgJ3B4J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyYXdTdGVwKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjaGVja1JlZHJhdyh2YWwpIHtcbiAgICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIHdhaXQgdGhhdCB0aGUgY2hhbmdlIGlzIHJlbmRlcmVkIGJlZm9yZSByZWRyYXdpbmdcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVkcmF3U3RlcCgpO1xuICAgICAgICAgICAgfSwgMik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzQ3VzdG9taXplZCgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuc3RlcC5zdGVwQ29udGVudCB8fFxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVNlcnZpY2UuZ2V0Q291bnRlcigpIHx8XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlU2VydmljZS5nZXRQcmV2QnV0dG9uKCkgfHxcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVTZXJ2aWNlLmdldE5leHRCdXR0b24oKSB8fFxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVNlcnZpY2UuZ2V0RG9uZUJ1dHRvbigpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRDdXN0b21UZXh0cygpIHtcbiAgICAgICAgY29uc3QgY3VzdG9tZVRleHRzID0gdGhpcy5vcHRpb25zU2VydmljZS5nZXRDdXN0b21UZXh0cygpO1xuICAgICAgICB0aGlzLnByZXZUZXh0ID0gY3VzdG9tZVRleHRzLnByZXY7XG4gICAgICAgIHRoaXMubmV4dFRleHQgPSBjdXN0b21lVGV4dHMubmV4dDtcbiAgICAgICAgdGhpcy5kb25lVGV4dCA9IGN1c3RvbWVUZXh0cy5kb25lO1xuICAgIH1cblxuICAgIHByaXZhdGUgZHJhd1N0ZXAoKSB7XG4gICAgICAgIGxldCBwb3NpdGlvbiA9IHRoaXMuc3RlcC5pc0VsZW1lbnRPckFuY2VzdG9yRml4ZWRcbiAgICAgICAgICAgID8gJ2ZpeGVkJ1xuICAgICAgICAgICAgOiAnYWJzb2x1dGUnO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKFxuICAgICAgICAgICAgdGhpcy5zdGVwSG9sZGVyLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAncG9zaXRpb24nLFxuICAgICAgICAgICAgcG9zaXRpb25cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgICAgICAgIHRoaXMuc3RlcEhvbGRlci5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgJ3RyYW5zZm9ybScsXG4gICAgICAgICAgICB0aGlzLnN0ZXAudHJhbnNmb3JtQ3NzU3R5bGVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy50YXJnZXRXaWR0aCA9IHRoaXMuc3RlcC50YXJnZXRWaWV3Q29udGFpbmVyLmVsZW1lbnQubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgdGhpcy50YXJnZXRIZWlnaHQgPSB0aGlzLnN0ZXAudGFyZ2V0Vmlld0NvbnRhaW5lci5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICB0aGlzLnRhcmdldEFic29sdXRlTGVmdCA9XG4gICAgICAgICAgICBwb3NpdGlvbiA9PT0gJ2ZpeGVkJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5kb2N1bWVudFNlcnZpY2UuZ2V0RWxlbWVudEZpeGVkTGVmdChcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0ZXAudGFyZ2V0Vmlld0NvbnRhaW5lci5lbGVtZW50XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiB0aGlzLmRvY3VtZW50U2VydmljZS5nZXRFbGVtZW50QWJzb2x1dGVMZWZ0KFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RlcC50YXJnZXRWaWV3Q29udGFpbmVyLmVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgIHRoaXMudGFyZ2V0QWJzb2x1dGVUb3AgPVxuICAgICAgICAgICAgcG9zaXRpb24gPT09ICdmaXhlZCdcbiAgICAgICAgICAgICAgICA/IHRoaXMuZG9jdW1lbnRTZXJ2aWNlLmdldEVsZW1lbnRGaXhlZFRvcChcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0ZXAudGFyZ2V0Vmlld0NvbnRhaW5lci5lbGVtZW50XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiB0aGlzLmRvY3VtZW50U2VydmljZS5nZXRFbGVtZW50QWJzb2x1dGVUb3AoXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGVwLnRhcmdldFZpZXdDb250YWluZXIuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zZXRTdGVwU3R5bGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENvdW50ZXIoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHN0ZXBQb3NpdGlvbiA9IHRoaXMuc3RlcHNDb250YWluZXJTZXJ2aWNlLmdldFN0ZXBOdW1iZXIoXG4gICAgICAgICAgICB0aGlzLnN0ZXAubmFtZVxuICAgICAgICApO1xuICAgICAgICBsZXQgbnVtYmVyT2ZTdGVwcyA9IHRoaXMuc3RlcHNDb250YWluZXJTZXJ2aWNlLmdldFN0ZXBzQ291bnQoKTtcbiAgICAgICAgdGhpcy5jb3VudGVyRGF0YSA9IHsgc3RlcDogc3RlcFBvc2l0aW9uLCB0b3RhbDogbnVtYmVyT2ZTdGVwcyB9O1xuICAgICAgICByZXR1cm4gc3RlcFBvc2l0aW9uICsgJy8nICsgbnVtYmVyT2ZTdGVwcztcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEN1c3RvbVRlbXBsYXRlcygpIHtcbiAgICAgICAgdGhpcy5jdXN0b21Db250ZW50ID0gdGhpcy5zdGVwLnN0ZXBDb250ZW50O1xuICAgICAgICB0aGlzLmN0eCA9IHRoaXMuc3RlcC5zdGVwQ29udGVudFBhcmFtcztcbiAgICAgICAgdGhpcy5jdXN0b21QcmV2QnV0dG9uID0gdGhpcy50ZW1wbGF0ZVNlcnZpY2UuZ2V0UHJldkJ1dHRvbigpO1xuICAgICAgICB0aGlzLmN1c3RvbU5leHRCdXR0b24gPSB0aGlzLnRlbXBsYXRlU2VydmljZS5nZXROZXh0QnV0dG9uKCk7XG4gICAgICAgIHRoaXMuY3VzdG9tRG9uZUJ1dHRvbiA9IHRoaXMudGVtcGxhdGVTZXJ2aWNlLmdldERvbmVCdXR0b24oKTtcbiAgICAgICAgdGhpcy5jdXN0b21Db3VudGVyID0gdGhpcy50ZW1wbGF0ZVNlcnZpY2UuZ2V0Q291bnRlcigpO1xuICAgIH1cblxuICAgIHByZXYoKSB7XG4gICAgICAgIHRoaXMuam95cmlkZVN0ZXBTZXJ2aWNlLnByZXYoKTtcbiAgICB9XG5cbiAgICBuZXh0KCkge1xuICAgICAgICB0aGlzLmpveXJpZGVTdGVwU2VydmljZS5uZXh0KCk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuam95cmlkZVN0ZXBTZXJ2aWNlLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgaXNGaXJzdFN0ZXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBzQ29udGFpbmVyU2VydmljZS5nZXRTdGVwTnVtYmVyKHRoaXMuc3RlcC5uYW1lKSA9PT0gMTtcbiAgICB9XG5cbiAgICBpc0xhc3RTdGVwKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5zdGVwc0NvbnRhaW5lclNlcnZpY2UuZ2V0U3RlcE51bWJlcih0aGlzLnN0ZXAubmFtZSkgPT09XG4gICAgICAgICAgICB0aGlzLnN0ZXBzQ29udGFpbmVyU2VydmljZS5nZXRTdGVwc0NvdW50KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFN0ZXBTdHlsZSgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0ZXAucG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0eWxlVG9wKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdib3R0b20nOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdHlsZUJvdHRvbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmlnaHQnOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdHlsZVJpZ2h0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdsZWZ0Jzoge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3R5bGVMZWZ0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdjZW50ZXInOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdHlsZUNlbnRlcigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3R5bGVCb3R0b20oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0U3R5bGVUb3AoKSB7XG4gICAgICAgIHRoaXMuc3RlcHNDb250YWluZXJTZXJ2aWNlLnVwZGF0ZVBvc2l0aW9uKHRoaXMuc3RlcC5uYW1lLCAndG9wJyk7XG4gICAgICAgIHRoaXMudG9wUG9zaXRpb24gPVxuICAgICAgICAgICAgdGhpcy50YXJnZXRBYnNvbHV0ZVRvcCAtIERJU1RBTkNFX0ZST01fVEFSR0VUIC0gdGhpcy5zdGVwSGVpZ2h0O1xuICAgICAgICB0aGlzLnN0ZXBBYnNvbHV0ZVRvcCA9XG4gICAgICAgICAgICB0aGlzLnRhcmdldEFic29sdXRlVG9wIC0gRElTVEFOQ0VfRlJPTV9UQVJHRVQgLSB0aGlzLnN0ZXBIZWlnaHQ7XG4gICAgICAgIHRoaXMuYXJyb3dUb3BQb3NpdGlvbiA9IHRoaXMuc3RlcEhlaWdodDtcblxuICAgICAgICB0aGlzLmxlZnRQb3NpdGlvbiA9XG4gICAgICAgICAgICB0aGlzLnRhcmdldFdpZHRoIC8gMiAtIHRoaXMuc3RlcFdpZHRoIC8gMiArIHRoaXMudGFyZ2V0QWJzb2x1dGVMZWZ0O1xuICAgICAgICB0aGlzLnN0ZXBBYnNvbHV0ZUxlZnQgPVxuICAgICAgICAgICAgdGhpcy50YXJnZXRXaWR0aCAvIDIgLSB0aGlzLnN0ZXBXaWR0aCAvIDIgKyB0aGlzLnRhcmdldEFic29sdXRlTGVmdDtcbiAgICAgICAgdGhpcy5hcnJvd0xlZnRQb3NpdGlvbiA9IHRoaXMuc3RlcFdpZHRoIC8gMiAtIHRoaXMuYXJyb3dTaXplO1xuICAgICAgICB0aGlzLmFkanVzdExlZnRQb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmFkanVzdFJpZ2h0UG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5hcnJvd1Bvc2l0aW9uID0gJ2JvdHRvbSc7XG4gICAgICAgIHRoaXMuYXV0b2ZpeFRvcFBvc2l0aW9uKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRTdHlsZVJpZ2h0KCkge1xuICAgICAgICB0aGlzLnN0ZXBzQ29udGFpbmVyU2VydmljZS51cGRhdGVQb3NpdGlvbih0aGlzLnN0ZXAubmFtZSwgJ3JpZ2h0Jyk7XG4gICAgICAgIHRoaXMudG9wUG9zaXRpb24gPVxuICAgICAgICAgICAgdGhpcy50YXJnZXRBYnNvbHV0ZVRvcCArXG4gICAgICAgICAgICB0aGlzLnRhcmdldEhlaWdodCAvIDIgLVxuICAgICAgICAgICAgdGhpcy5zdGVwSGVpZ2h0IC8gMjtcbiAgICAgICAgdGhpcy5zdGVwQWJzb2x1dGVUb3AgPVxuICAgICAgICAgICAgdGhpcy50YXJnZXRBYnNvbHV0ZVRvcCArXG4gICAgICAgICAgICB0aGlzLnRhcmdldEhlaWdodCAvIDIgLVxuICAgICAgICAgICAgdGhpcy5zdGVwSGVpZ2h0IC8gMjtcbiAgICAgICAgdGhpcy5hcnJvd1RvcFBvc2l0aW9uID0gdGhpcy5zdGVwSGVpZ2h0IC8gMiAtIHRoaXMuYXJyb3dTaXplO1xuXG4gICAgICAgIHRoaXMubGVmdFBvc2l0aW9uID1cbiAgICAgICAgICAgIHRoaXMudGFyZ2V0QWJzb2x1dGVMZWZ0ICsgdGhpcy50YXJnZXRXaWR0aCArIERJU1RBTkNFX0ZST01fVEFSR0VUO1xuICAgICAgICB0aGlzLnN0ZXBBYnNvbHV0ZUxlZnQgPVxuICAgICAgICAgICAgdGhpcy50YXJnZXRBYnNvbHV0ZUxlZnQgKyB0aGlzLnRhcmdldFdpZHRoICsgRElTVEFOQ0VfRlJPTV9UQVJHRVQ7XG4gICAgICAgIHRoaXMuYXJyb3dMZWZ0UG9zaXRpb24gPSAtdGhpcy5hcnJvd1NpemU7XG4gICAgICAgIHRoaXMuYWRqdXN0VG9wUG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5hZGp1c3RCb3R0b21Qb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmFycm93UG9zaXRpb24gPSAnbGVmdCc7XG4gICAgICAgIHRoaXMuYXV0b2ZpeFJpZ2h0UG9zaXRpb24oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFN0eWxlQm90dG9tKCkge1xuICAgICAgICB0aGlzLnN0ZXBzQ29udGFpbmVyU2VydmljZS51cGRhdGVQb3NpdGlvbih0aGlzLnN0ZXAubmFtZSwgJ2JvdHRvbScpO1xuICAgICAgICB0aGlzLnRvcFBvc2l0aW9uID1cbiAgICAgICAgICAgIHRoaXMudGFyZ2V0QWJzb2x1dGVUb3AgKyB0aGlzLnRhcmdldEhlaWdodCArIERJU1RBTkNFX0ZST01fVEFSR0VUO1xuICAgICAgICB0aGlzLnN0ZXBBYnNvbHV0ZVRvcCA9XG4gICAgICAgICAgICB0aGlzLnRhcmdldEFic29sdXRlVG9wICsgdGhpcy50YXJnZXRIZWlnaHQgKyBESVNUQU5DRV9GUk9NX1RBUkdFVDtcbiAgICAgICAgdGhpcy5hcnJvd1RvcFBvc2l0aW9uID0gLXRoaXMuYXJyb3dTaXplO1xuXG4gICAgICAgIHRoaXMuYXJyb3dMZWZ0UG9zaXRpb24gPSB0aGlzLnN0ZXBXaWR0aCAvIDIgLSB0aGlzLmFycm93U2l6ZTtcbiAgICAgICAgdGhpcy5sZWZ0UG9zaXRpb24gPVxuICAgICAgICAgICAgdGhpcy50YXJnZXRXaWR0aCAvIDIgLSB0aGlzLnN0ZXBXaWR0aCAvIDIgKyB0aGlzLnRhcmdldEFic29sdXRlTGVmdDtcbiAgICAgICAgdGhpcy5zdGVwQWJzb2x1dGVMZWZ0ID1cbiAgICAgICAgICAgIHRoaXMudGFyZ2V0V2lkdGggLyAyIC0gdGhpcy5zdGVwV2lkdGggLyAyICsgdGhpcy50YXJnZXRBYnNvbHV0ZUxlZnQ7XG4gICAgICAgIHRoaXMuYWRqdXN0TGVmdFBvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuYWRqdXN0UmlnaHRQb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmFycm93UG9zaXRpb24gPSAndG9wJztcbiAgICAgICAgdGhpcy5hdXRvZml4Qm90dG9tUG9zaXRpb24oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFN0eWxlTGVmdCgpIHtcbiAgICAgICAgdGhpcy5zdGVwc0NvbnRhaW5lclNlcnZpY2UudXBkYXRlUG9zaXRpb24odGhpcy5zdGVwLm5hbWUsICdsZWZ0Jyk7XG4gICAgICAgIHRoaXMudG9wUG9zaXRpb24gPVxuICAgICAgICAgICAgdGhpcy50YXJnZXRBYnNvbHV0ZVRvcCArXG4gICAgICAgICAgICB0aGlzLnRhcmdldEhlaWdodCAvIDIgLVxuICAgICAgICAgICAgdGhpcy5zdGVwSGVpZ2h0IC8gMjtcbiAgICAgICAgdGhpcy5zdGVwQWJzb2x1dGVUb3AgPVxuICAgICAgICAgICAgdGhpcy50YXJnZXRBYnNvbHV0ZVRvcCArXG4gICAgICAgICAgICB0aGlzLnRhcmdldEhlaWdodCAvIDIgLVxuICAgICAgICAgICAgdGhpcy5zdGVwSGVpZ2h0IC8gMjtcbiAgICAgICAgdGhpcy5hcnJvd1RvcFBvc2l0aW9uID0gdGhpcy5zdGVwSGVpZ2h0IC8gMiAtIHRoaXMuYXJyb3dTaXplO1xuXG4gICAgICAgIHRoaXMubGVmdFBvc2l0aW9uID1cbiAgICAgICAgICAgIHRoaXMudGFyZ2V0QWJzb2x1dGVMZWZ0IC0gdGhpcy5zdGVwV2lkdGggLSBESVNUQU5DRV9GUk9NX1RBUkdFVDtcbiAgICAgICAgdGhpcy5zdGVwQWJzb2x1dGVMZWZ0ID1cbiAgICAgICAgICAgIHRoaXMudGFyZ2V0QWJzb2x1dGVMZWZ0IC0gdGhpcy5zdGVwV2lkdGggLSBESVNUQU5DRV9GUk9NX1RBUkdFVDtcbiAgICAgICAgdGhpcy5hcnJvd0xlZnRQb3NpdGlvbiA9IHRoaXMuc3RlcFdpZHRoO1xuICAgICAgICB0aGlzLmFkanVzdFRvcFBvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuYWRqdXN0Qm90dG9tUG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5hcnJvd1Bvc2l0aW9uID0gJ3JpZ2h0JztcbiAgICAgICAgdGhpcy5hdXRvZml4TGVmdFBvc2l0aW9uKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRTdHlsZUNlbnRlcigpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgICAgICAgIHRoaXMuc3RlcEhvbGRlci5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgJ3Bvc2l0aW9uJyxcbiAgICAgICAgICAgICdmaXhlZCdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnN0ZXBIb2xkZXIubmF0aXZlRWxlbWVudCwgJ3RvcCcsICc1MCUnKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnN0ZXBIb2xkZXIubmF0aXZlRWxlbWVudCwgJ2xlZnQnLCAnNTAlJyk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVTdGVwRGltZW5zaW9ucygpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG4gICAgICAgICAgICB0aGlzLnN0ZXBIb2xkZXIubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgICAgICAgYHRyYW5zbGF0ZSgtJHt0aGlzLnN0ZXBXaWR0aCAvIDJ9cHgsIC0ke3RoaXMuc3RlcEhlaWdodCAvIDJ9cHgpYFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnNob3dBcnJvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRqdXN0TGVmdFBvc2l0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5sZWZ0UG9zaXRpb24gPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmFycm93TGVmdFBvc2l0aW9uID1cbiAgICAgICAgICAgICAgICB0aGlzLmFycm93TGVmdFBvc2l0aW9uICtcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRQb3NpdGlvbiAtXG4gICAgICAgICAgICAgICAgREVGQVVMVF9ESVNUQU5DRV9GUk9NX01BUkdJTl9MRUZUO1xuICAgICAgICAgICAgdGhpcy5sZWZ0UG9zaXRpb24gPSBERUZBVUxUX0RJU1RBTkNFX0ZST01fTUFSR0lOX0xFRlQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFkanVzdFJpZ2h0UG9zaXRpb24oKSB7XG4gICAgICAgIGxldCBjdXJyZW50V2luZG93V2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xuICAgICAgICBpZiAodGhpcy5zdGVwQWJzb2x1dGVMZWZ0ICsgdGhpcy5zdGVwV2lkdGggPiBjdXJyZW50V2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgIGxldCBuZXdMZWZ0UG9zID1cbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRQb3NpdGlvbiAtXG4gICAgICAgICAgICAgICAgKHRoaXMuc3RlcEFic29sdXRlTGVmdCArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RlcFdpZHRoICtcbiAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9ESVNUQU5DRV9GUk9NX01BUkdJTl9SSUdIVCAtXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRXaW5kb3dXaWR0aCk7XG4gICAgICAgICAgICBsZXQgZGVsdGFMZWZ0UG9zaXRpb24gPSBuZXdMZWZ0UG9zIC0gdGhpcy5sZWZ0UG9zaXRpb247XG5cbiAgICAgICAgICAgIHRoaXMubGVmdFBvc2l0aW9uID0gbmV3TGVmdFBvcztcbiAgICAgICAgICAgIHRoaXMuYXJyb3dMZWZ0UG9zaXRpb24gPSB0aGlzLmFycm93TGVmdFBvc2l0aW9uIC0gZGVsdGFMZWZ0UG9zaXRpb247XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFkanVzdFRvcFBvc2l0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zdGVwQWJzb2x1dGVUb3AgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmFycm93VG9wUG9zaXRpb24gPVxuICAgICAgICAgICAgICAgIHRoaXMuYXJyb3dUb3BQb3NpdGlvbiArXG4gICAgICAgICAgICAgICAgdGhpcy50b3BQb3NpdGlvbiAtXG4gICAgICAgICAgICAgICAgREVGQVVMVF9ESVNUQU5DRV9GUk9NX01BUkdJTl9UT1A7XG4gICAgICAgICAgICB0aGlzLnRvcFBvc2l0aW9uID0gREVGQVVMVF9ESVNUQU5DRV9GUk9NX01BUkdJTl9UT1A7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFkanVzdEJvdHRvbVBvc2l0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zdGVwQWJzb2x1dGVUb3AgKyB0aGlzLnN0ZXBIZWlnaHQgPiB0aGlzLmRvY3VtZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICBsZXQgbmV3VG9wUG9zID1cbiAgICAgICAgICAgICAgICB0aGlzLnRvcFBvc2l0aW9uIC1cbiAgICAgICAgICAgICAgICAodGhpcy5zdGVwQWJzb2x1dGVUb3AgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0ZXBIZWlnaHQgK1xuICAgICAgICAgICAgICAgICAgICBERUZBVUxUX0RJU1RBTkNFX0ZST01fTUFSR0lOX0JPVFRPTSAtXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRIZWlnaHQpO1xuICAgICAgICAgICAgbGV0IGRlbHRhVG9wUG9zaXRpb24gPSBuZXdUb3BQb3MgLSB0aGlzLnRvcFBvc2l0aW9uO1xuXG4gICAgICAgICAgICB0aGlzLnRvcFBvc2l0aW9uID0gbmV3VG9wUG9zO1xuICAgICAgICAgICAgdGhpcy5hcnJvd1RvcFBvc2l0aW9uID0gdGhpcy5hcnJvd1RvcFBvc2l0aW9uIC0gZGVsdGFUb3BQb3NpdGlvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXV0b2ZpeFRvcFBvc2l0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5wb3NpdGlvbkFscmVhZHlGaXhlZCkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcbiAgICAgICAgICAgICAgICAnTm8gc3RlcCBwb3NpdGlvbnMgZm91bmQgZm9yIHRoaXMgc3RlcC4gVGhlIHN0ZXAgd2lsbCBiZSBjZW50ZXJlZC4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy50YXJnZXRBYnNvbHV0ZVRvcCAtIHRoaXMuc3RlcEhlaWdodCAtIHRoaXMuYXJyb3dTaXplIDxcbiAgICAgICAgICAgIDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uQWxyZWFkeUZpeGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3R5bGVSaWdodCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhdXRvZml4UmlnaHRQb3NpdGlvbigpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy50YXJnZXRBYnNvbHV0ZUxlZnQgK1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0V2lkdGggK1xuICAgICAgICAgICAgICAgIHRoaXMuc3RlcFdpZHRoICtcbiAgICAgICAgICAgICAgICB0aGlzLmFycm93U2l6ZSA+XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHlsZUJvdHRvbSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhdXRvZml4Qm90dG9tUG9zaXRpb24oKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0QWJzb2x1dGVUb3AgK1xuICAgICAgICAgICAgICAgIHRoaXMuc3RlcEhlaWdodCArXG4gICAgICAgICAgICAgICAgdGhpcy5hcnJvd1NpemUgK1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0SGVpZ2h0ID5cbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRIZWlnaHRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0eWxlTGVmdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhdXRvZml4TGVmdFBvc2l0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXRBYnNvbHV0ZUxlZnQgLSB0aGlzLnN0ZXBXaWR0aCAtIHRoaXMuYXJyb3dTaXplIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHlsZVRvcCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVUb1Jlc2l6ZUV2ZW50cygpOiBTdWJzY3JpcHRpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5ldmVudExpc3RlbmVyU2VydmljZS5yZXNpemVFdmVudC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWRyYXdTdGVwKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVkcmF3U3RlcCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdGVwRGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLmRyYXdTdGVwKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREaW1lbnNpb25zQnlBc3BlY3RSYXRpbyhcbiAgICAgICAgd2lkdGg6IG51bWJlcixcbiAgICAgICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgICAgIGFzcGVjdFJhdGlvOiBudW1iZXJcbiAgICApIHtcbiAgICAgICAgbGV0IGNhbGNIZWlnaHQgPSAod2lkdGggKyBoZWlnaHQpIC8gKDEgKyBhc3BlY3RSYXRpbyk7XG4gICAgICAgIGxldCBjYWxjV2lkdGggPSBjYWxjSGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aDogY2FsY1dpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBjYWxjSGVpZ2h0XG4gICAgICAgIH07XG4gICAgfVxuICAgIHByaXZhdGUgYWRqdXN0RGltZW5zaW9ucyh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICBsZXQgYXJlYSA9IHdpZHRoICogaGVpZ2h0O1xuICAgICAgICBsZXQgbmV3V2lkdGggPSB3aWR0aDtcbiAgICAgICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgaWYgKHdpZHRoID4gU1RFUF9NQVhfV0lEVEgpIHtcbiAgICAgICAgICAgIG5ld1dpZHRoID0gU1RFUF9NQVhfV0lEVEg7XG4gICAgICAgICAgICBuZXdIZWlnaHQgPSBhcmVhIC8gbmV3V2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAod2lkdGggPCBTVEVQX01JTl9XSURUSCkge1xuICAgICAgICAgICAgbmV3V2lkdGggPSBTVEVQX01JTl9XSURUSDtcbiAgICAgICAgICAgIG5ld0hlaWdodCA9IFNURVBfTUlOX1dJRFRIIC8gQVNQRUNUX1JBVElPO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aDogbmV3V2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IG5ld0hlaWdodFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU3RlcERpbWVuc2lvbnMoKSB7XG4gICAgICAgIHRoaXMuc3RlcFdpZHRoID0gdGhpcy5zdGVwQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICAgIHRoaXMuc3RlcEhlaWdodCA9IHRoaXMuc3RlcENvbnRhaW5lci5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=