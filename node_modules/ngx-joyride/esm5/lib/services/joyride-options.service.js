import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { of, Observable } from 'rxjs';
export var DEFAULT_THEME_COLOR = '#3b5560';
export var STEP_DEFAULT_POSITION = 'bottom';
export var DEFAULT_TIMEOUT_BETWEEN_STEPS = 1;
var ObservableCustomTexts = /** @class */ (function () {
    function ObservableCustomTexts() {
    }
    return ObservableCustomTexts;
}());
export { ObservableCustomTexts };
export var DEFAULT_TEXTS = {
    prev: of('prev'),
    next: of('next'),
    done: of('done'),
    close: of(null)
};
var JoyrideOptionsService = /** @class */ (function () {
    function JoyrideOptionsService() {
        this.themeColor = DEFAULT_THEME_COLOR;
        this.stepDefaultPosition = STEP_DEFAULT_POSITION;
        this.logsEnabled = false;
        this.showCounter = true;
        this.showPrevButton = true;
        this.stepsOrder = [];
    }
    JoyrideOptionsService.prototype.setOptions = function (options) {
        this.stepsOrder = options.steps;
        this.stepDefaultPosition = options.stepDefaultPosition
            ? options.stepDefaultPosition
            : this.stepDefaultPosition;
        this.logsEnabled =
            typeof options.logsEnabled !== 'undefined'
                ? options.logsEnabled
                : this.logsEnabled;
        this.showCounter =
            typeof options.showCounter !== 'undefined'
                ? options.showCounter
                : this.showCounter;
        this.showPrevButton =
            typeof options.showPrevButton !== 'undefined'
                ? options.showPrevButton
                : this.showPrevButton;
        this.themeColor = options.themeColor
            ? options.themeColor
            : this.themeColor;
        this.firstStep = options.startWith;
        this.waitingTime =
            typeof options.waitingTime !== 'undefined'
                ? options.waitingTime
                : DEFAULT_TIMEOUT_BETWEEN_STEPS;
        typeof options.customTexts !== 'undefined'
            ? this.setCustomText(options.customTexts)
            : this.setCustomText(DEFAULT_TEXTS);
    };
    JoyrideOptionsService.prototype.getBackdropColor = function () {
        return this.hexToRgb(this.themeColor);
    };
    JoyrideOptionsService.prototype.getThemeColor = function () {
        return this.themeColor;
    };
    JoyrideOptionsService.prototype.getStepDefaultPosition = function () {
        return this.stepDefaultPosition;
    };
    JoyrideOptionsService.prototype.getStepsOrder = function () {
        return this.stepsOrder;
    };
    JoyrideOptionsService.prototype.getFirstStep = function () {
        return this.firstStep;
    };
    JoyrideOptionsService.prototype.getWaitingTime = function () {
        return this.waitingTime;
    };
    JoyrideOptionsService.prototype.areLogsEnabled = function () {
        return this.logsEnabled;
    };
    JoyrideOptionsService.prototype.isCounterVisible = function () {
        return this.showCounter;
    };
    JoyrideOptionsService.prototype.isPrevButtonVisible = function () {
        return this.showPrevButton;
    };
    JoyrideOptionsService.prototype.getCustomTexts = function () {
        return this.customTexts;
    };
    JoyrideOptionsService.prototype.setCustomText = function (texts) {
        var prev;
        var next;
        var done;
        var close;
        prev = texts.prev ? texts.prev : DEFAULT_TEXTS.prev;
        next = texts.next ? texts.next : DEFAULT_TEXTS.next;
        done = texts.done ? texts.done : DEFAULT_TEXTS.done;
        close = texts.close ? texts.close : DEFAULT_TEXTS.close;
        this.customTexts = {
            prev: this.toObservable(prev),
            next: this.toObservable(next),
            done: this.toObservable(done),
            close: this.toObservable(close)
        };
    };
    JoyrideOptionsService.prototype.toObservable = function (value) {
        return value instanceof Observable ? value : of(value);
    };
    JoyrideOptionsService.prototype.hexToRgb = function (hex) {
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
            return r + r + g + g + b + b;
        });
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
            ? parseInt(result[1], 16) + ", " + parseInt(result[2], 16) + ", " + parseInt(result[3], 16)
            : null;
    };
    JoyrideOptionsService = __decorate([
        Injectable()
    ], JoyrideOptionsService);
    return JoyrideOptionsService;
}());
export { JoyrideOptionsService };
//# sourceMappingURL=data:application/json;base64,