import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { JoyrideBackdropService } from './joyride-backdrop.service';
import { EventListenerService } from './event-listener.service';
import { JoyrideStepsContainerService, StepActionType } from './joyride-steps-container.service';
import { DocumentService } from './document.service';
import { StepDrawerService } from './step-drawer.service';
import { DomRefService } from './dom.service';
import { NO_POSITION } from '../directives/joyride.directive';
import { JoyrideOptionsService } from './joyride-options.service';
import { Router } from '@angular/router';
import { ReplaySubject } from 'rxjs';
import { JoyrideStepDoesNotExist, JoyrideStepOutOfRange } from '../models/joyride-error.class';
import { LoggerService } from './logger.service';
var SCROLLBAR_SIZE = 20;
export var DISTANCE_FROM_TARGET = 15;
export var ARROW_SIZE = 10;
var JoyrideStepService = /** @class */ (function () {
    function JoyrideStepService(backDropService, eventListener, stepsContainerService, documentService, DOMService, stepDrawerService, optionsService, router, logger) {
        this.backDropService = backDropService;
        this.eventListener = eventListener;
        this.stepsContainerService = stepsContainerService;
        this.documentService = documentService;
        this.DOMService = DOMService;
        this.stepDrawerService = stepDrawerService;
        this.optionsService = optionsService;
        this.router = router;
        this.logger = logger;
        this.winTopPosition = 0;
        this.winBottomPosition = 0;
        this.stepsObserver = new ReplaySubject();
        this.initViewportPositions();
        this.subscribeToScrollEvents();
        this.subscribeToResizeEvents();
    }
    JoyrideStepService.prototype.initViewportPositions = function () {
        this.winTopPosition = 0;
        this.winBottomPosition = this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;
    };
    JoyrideStepService.prototype.subscribeToScrollEvents = function () {
        var _this = this;
        this.eventListener.startListeningScrollEvents();
        this.eventListener.scrollEvent.subscribe(function (scroll) {
            _this.winTopPosition = scroll.scrollY;
            _this.winBottomPosition = _this.winTopPosition + _this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;
            if (_this.currentStep)
                _this.backDropService.redraw(_this.currentStep, scroll);
        });
    };
    JoyrideStepService.prototype.subscribeToResizeEvents = function () {
        var _this = this;
        this.eventListener.resizeEvent.subscribe(function () {
            if (_this.currentStep)
                _this.backDropService.redrawTarget(_this.currentStep);
        });
    };
    JoyrideStepService.prototype.drawStep = function (step) {
        step.position = step.position === NO_POSITION ? this.optionsService.getStepDefaultPosition() : step.position;
        this.stepDrawerService.draw(step);
    };
    JoyrideStepService.prototype.startTour = function () {
        this.stepsObserver = new ReplaySubject();
        this.stepsContainerService.init();
        this.documentService.setDocumentHeight();
        this.tryShowStep(StepActionType.NEXT);
        this.eventListener.startListeningResizeEvents();
        this.subscribeToStepsUpdates();
        return this.stepsObserver.asObservable();
    };
    JoyrideStepService.prototype.close = function () {
        this.removeCurrentStep();
        this.notifyTourIsFinished();
        this.DOMService.getNativeWindow().scrollTo(0, 0);
        this.eventListener.stopListeningResizeEvents();
        this.backDropService.remove();
    };
    JoyrideStepService.prototype.prev = function () {
        this.removeCurrentStep();
        this.currentStep.prevCliked.emit();
        this.tryShowStep(StepActionType.PREV);
    };
    JoyrideStepService.prototype.next = function () {
        this.removeCurrentStep();
        this.currentStep.nextClicked.emit();
        this.tryShowStep(StepActionType.NEXT);
    };
    JoyrideStepService.prototype.navigateToStepPage = function (action) {
        var stepRoute = this.stepsContainerService.getStepRoute(action);
        if (stepRoute) {
            this.router.navigate([stepRoute]);
        }
    };
    JoyrideStepService.prototype.subscribeToStepsUpdates = function () {
        var _this = this;
        this.stepsContainerService.stepHasBeenModified.subscribe(function (updatedStep) {
            if (_this.currentStep && _this.currentStep.name === updatedStep.name) {
                _this.currentStep = updatedStep;
            }
        });
    };
    JoyrideStepService.prototype.tryShowStep = function (actionType) {
        var _this = this;
        this.navigateToStepPage(actionType);
        var timeout = this.optionsService.getWaitingTime();
        if (timeout > 100)
            this.backDropService.remove();
        setTimeout(function () {
            try {
                _this.showStep(actionType);
            }
            catch (error) {
                if (error instanceof JoyrideStepDoesNotExist) {
                    _this.tryShowStep(actionType);
                }
                else if (error instanceof JoyrideStepOutOfRange) {
                    _this.logger.error('Forcing the tour closure: First or Last step not found in the DOM.');
                    _this.close();
                }
                else {
                    throw new Error(error);
                }
            }
        }, timeout);
    };
    JoyrideStepService.prototype.showStep = function (actionType) {
        this.currentStep = this.stepsContainerService.get(actionType);
        if (this.currentStep == null)
            throw new JoyrideStepDoesNotExist('');
        // Scroll the element to get it visible if it's in a scrollable element
        this.scrollIfElementBeyondOtherElements();
        this.backDropService.draw(this.currentStep);
        this.drawStep(this.currentStep);
        this.scrollIfStepAndTargetAreNotVisible();
        this.notifyStepClicked(actionType);
    };
    JoyrideStepService.prototype.notifyStepClicked = function (actionType) {
        var stepInfo = {
            number: this.stepsContainerService.getStepNumber(this.currentStep.name),
            name: this.currentStep.name,
            route: this.currentStep.route,
            actionType: actionType
        };
        this.stepsObserver.next(stepInfo);
    };
    JoyrideStepService.prototype.notifyTourIsFinished = function () {
        if (this.currentStep)
            this.currentStep.tourDone.emit();
        this.stepsObserver.complete();
    };
    JoyrideStepService.prototype.removeCurrentStep = function () {
        if (this.currentStep)
            this.stepDrawerService.remove(this.currentStep);
    };
    JoyrideStepService.prototype.scrollIfStepAndTargetAreNotVisible = function () {
        this.scrollWhenTargetOrStepAreHiddenBottom();
        this.scrollWhenTargetOrStepAreHiddenTop();
    };
    JoyrideStepService.prototype.scrollWhenTargetOrStepAreHiddenBottom = function () {
        var totalTargetBottom = this.getMaxTargetAndStepBottomPosition();
        if (totalTargetBottom > this.winBottomPosition) {
            this.DOMService.getNativeWindow().scrollBy(0, totalTargetBottom - this.winBottomPosition);
        }
    };
    JoyrideStepService.prototype.scrollWhenTargetOrStepAreHiddenTop = function () {
        var totalTargetTop = this.getMaxTargetAndStepTopPosition();
        if (totalTargetTop < this.winTopPosition) {
            this.DOMService.getNativeWindow().scrollBy(0, totalTargetTop - this.winTopPosition);
        }
    };
    JoyrideStepService.prototype.getMaxTargetAndStepBottomPosition = function () {
        var targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);
        if (this.currentStep.position === 'top') {
            return targetAbsoluteTop + this.currentStep.stepInstance.targetHeight;
        }
        else if (this.currentStep.position === 'bottom') {
            return (targetAbsoluteTop +
                this.currentStep.stepInstance.targetHeight +
                this.currentStep.stepInstance.stepHeight +
                ARROW_SIZE +
                DISTANCE_FROM_TARGET);
        }
        else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {
            return Math.max(targetAbsoluteTop + this.currentStep.stepInstance.targetHeight, targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 + this.currentStep.stepInstance.stepHeight / 2);
        }
    };
    JoyrideStepService.prototype.getMaxTargetAndStepTopPosition = function () {
        var targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);
        if (this.currentStep.position === 'top') {
            return targetAbsoluteTop - (this.currentStep.stepInstance.stepHeight + ARROW_SIZE + DISTANCE_FROM_TARGET);
        }
        else if (this.currentStep.position === 'bottom') {
            return targetAbsoluteTop;
        }
        else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {
            return Math.min(targetAbsoluteTop, targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 - this.currentStep.stepInstance.stepHeight / 2);
        }
    };
    JoyrideStepService.prototype.scrollIfElementBeyondOtherElements = function () {
        if (this.isElementBeyondOthers() === 2) {
            this.documentService.scrollToTheTop(this.currentStep.targetViewContainer.element);
        }
        if (this.isElementBeyondOthers() === 2) {
            this.documentService.scrollToTheBottom(this.currentStep.targetViewContainer.element);
        }
        if (this.isElementBeyondOthers() === 1 && this.documentService.isParentScrollable(this.currentStep.targetViewContainer.element)) {
            this.documentService.scrollIntoView(this.currentStep.targetViewContainer.element, this.currentStep.isElementOrAncestorFixed);
        }
        if (this.isElementBeyondOthers() === 1 && this.documentService.isParentScrollable(this.currentStep.targetViewContainer.element)) {
            this.currentStep.targetViewContainer.element.nativeElement.scrollIntoView();
        }
    };
    JoyrideStepService.prototype.isElementBeyondOthers = function () {
        return this.documentService.isElementBeyondOthers(this.currentStep.targetViewContainer.element, this.currentStep.isElementOrAncestorFixed, 'backdrop');
    };
    JoyrideStepService.ctorParameters = function () { return [
        { type: JoyrideBackdropService },
        { type: EventListenerService },
        { type: JoyrideStepsContainerService },
        { type: DocumentService },
        { type: DomRefService },
        { type: StepDrawerService },
        { type: JoyrideOptionsService },
        { type: Router },
        { type: LoggerService }
    ]; };
    JoyrideStepService = __decorate([
        Injectable()
    ], JoyrideStepService);
    return JoyrideStepService;
}());
export { JoyrideStepService };
//# sourceMappingURL=data:application/json;base64,