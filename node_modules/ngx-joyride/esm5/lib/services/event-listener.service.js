import { __decorate } from "tslib";
import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';
import { Subject } from 'rxjs';
import { DomRefService } from './dom.service';
var Scroll = /** @class */ (function () {
    function Scroll() {
    }
    return Scroll;
}());
export { Scroll };
var EventListenerService = /** @class */ (function () {
    function EventListenerService(rendererFactory, DOMService) {
        this.rendererFactory = rendererFactory;
        this.DOMService = DOMService;
        this.scrollEvent = new Subject();
        this.resizeEvent = new Subject();
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    EventListenerService.prototype.startListeningScrollEvents = function () {
        var _this = this;
        this.scrollUnlisten = this.renderer.listen('document', 'scroll', function (evt) {
            _this.scrollEvent.next({
                scrollX: _this.DOMService.getNativeWindow().pageXOffset,
                scrollY: _this.DOMService.getNativeWindow().pageYOffset
            });
        });
    };
    EventListenerService.prototype.startListeningResizeEvents = function () {
        var _this = this;
        this.resizeUnlisten = this.renderer.listen('window', 'resize', function (evt) {
            _this.resizeEvent.next(evt);
        });
    };
    EventListenerService.prototype.stopListeningScrollEvents = function () {
        this.scrollUnlisten();
    };
    EventListenerService.prototype.stopListeningResizeEvents = function () {
        this.resizeUnlisten();
    };
    EventListenerService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: DomRefService }
    ]; };
    EventListenerService = __decorate([
        Injectable()
    ], EventListenerService);
    return EventListenerService;
}());
export { EventListenerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtbGlzdGVuZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1qb3lyaWRlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2V2ZW50LWxpc3RlbmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5QztJQUFBO0lBR0EsQ0FBQztJQUFELGFBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQzs7QUFHRDtJQVFJLDhCQUE2QixlQUFpQyxFQUFtQixVQUF5QjtRQUE3RSxvQkFBZSxHQUFmLGVBQWUsQ0FBa0I7UUFBbUIsZUFBVSxHQUFWLFVBQVUsQ0FBZTtRQUgxRyxnQkFBVyxHQUFvQixJQUFJLE9BQU8sRUFBVSxDQUFDO1FBQ3JELGdCQUFXLEdBQW9CLElBQUksT0FBTyxFQUFVLENBQUM7UUFHakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQseURBQTBCLEdBQTFCO1FBQUEsaUJBT0M7UUFORyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBQSxHQUFHO1lBQ2hFLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO2dCQUNsQixPQUFPLEVBQUUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXO2dCQUN0RCxPQUFPLEVBQUUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXO2FBQ3pELENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELHlEQUEwQixHQUExQjtRQUFBLGlCQUlDO1FBSEcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQUEsR0FBRztZQUM5RCxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx3REFBeUIsR0FBekI7UUFDSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELHdEQUF5QixHQUF6QjtRQUNJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDOztnQkF6QjZDLGdCQUFnQjtnQkFBK0IsYUFBYTs7SUFSakcsb0JBQW9CO1FBRGhDLFVBQVUsRUFBRTtPQUNBLG9CQUFvQixDQWtDaEM7SUFBRCwyQkFBQztDQUFBLEFBbENELElBa0NDO1NBbENZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyMiwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRG9tUmVmU2VydmljZSB9IGZyb20gJy4vZG9tLnNlcnZpY2UnO1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsIHtcbiAgICBzY3JvbGxYOiBudW1iZXI7XG4gICAgc2Nyb2xsWTogbnVtYmVyO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRXZlbnRMaXN0ZW5lclNlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcml2YXRlIHNjcm9sbFVubGlzdGVuOiBhbnk7XG4gICAgcHJpdmF0ZSByZXNpemVVbmxpc3RlbjogYW55O1xuXG4gICAgc2Nyb2xsRXZlbnQ6IFN1YmplY3Q8U2Nyb2xsPiA9IG5ldyBTdWJqZWN0PFNjcm9sbD4oKTtcbiAgICByZXNpemVFdmVudDogU3ViamVjdDxudW1iZXI+ID0gbmV3IFN1YmplY3Q8bnVtYmVyPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSByZW5kZXJlckZhY3Rvcnk6IFJlbmRlcmVyRmFjdG9yeTIsIHByaXZhdGUgcmVhZG9ubHkgRE9NU2VydmljZTogRG9tUmVmU2VydmljZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKG51bGwsIG51bGwpO1xuICAgIH1cblxuICAgIHN0YXJ0TGlzdGVuaW5nU2Nyb2xsRXZlbnRzKCkge1xuICAgICAgICB0aGlzLnNjcm9sbFVubGlzdGVuID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ2RvY3VtZW50JywgJ3Njcm9sbCcsIGV2dCA9PiB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbEV2ZW50Lm5leHQoe1xuICAgICAgICAgICAgICAgIHNjcm9sbFg6IHRoaXMuRE9NU2VydmljZS5nZXROYXRpdmVXaW5kb3coKS5wYWdlWE9mZnNldCxcbiAgICAgICAgICAgICAgICBzY3JvbGxZOiB0aGlzLkRPTVNlcnZpY2UuZ2V0TmF0aXZlV2luZG93KCkucGFnZVlPZmZzZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGFydExpc3RlbmluZ1Jlc2l6ZUV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5yZXNpemVVbmxpc3RlbiA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgZXZ0ID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplRXZlbnQubmV4dChldnQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdG9wTGlzdGVuaW5nU2Nyb2xsRXZlbnRzKCkge1xuICAgICAgICB0aGlzLnNjcm9sbFVubGlzdGVuKCk7XG4gICAgfVxuXG4gICAgc3RvcExpc3RlbmluZ1Jlc2l6ZUV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5yZXNpemVVbmxpc3RlbigpO1xuICAgIH1cbn1cbiJdfQ==