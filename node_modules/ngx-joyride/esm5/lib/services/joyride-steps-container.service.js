import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { JoyrideOptionsService } from './joyride-options.service';
import { LoggerService } from './logger.service';
import { JoyrideError, JoyrideStepOutOfRange } from '../models/joyride-error.class';
var ROUTE_SEPARATOR = '@';
var Step = /** @class */ (function () {
    function Step() {
    }
    return Step;
}());
export var StepActionType;
(function (StepActionType) {
    StepActionType["NEXT"] = "NEXT";
    StepActionType["PREV"] = "PREV";
})(StepActionType || (StepActionType = {}));
var JoyrideStepsContainerService = /** @class */ (function () {
    function JoyrideStepsContainerService(stepOptions, logger) {
        this.stepOptions = stepOptions;
        this.logger = logger;
        this.tempSteps = [];
        this.currentStepIndex = -2;
        this.stepHasBeenModified = new Subject();
    }
    JoyrideStepsContainerService.prototype.getFirstStepIndex = function () {
        var firstStep = this.stepOptions.getFirstStep();
        var stepIds = this.stepOptions.getStepsOrder();
        var index = stepIds.indexOf(firstStep);
        if (index < 0) {
            index = 0;
            if (firstStep !== undefined)
                this.logger.warn("The step " + firstStep + " does not exist. Check in your step list if it's present.");
        }
        return index;
    };
    JoyrideStepsContainerService.prototype.init = function () {
        var _this = this;
        this.logger.info('Initializing the steps array.');
        this.steps = [];
        this.currentStepIndex = this.getFirstStepIndex() - 1;
        var stepIds = this.stepOptions.getStepsOrder();
        stepIds.forEach(function (stepId) { return _this.steps.push({ id: stepId, step: null }); });
    };
    JoyrideStepsContainerService.prototype.addStep = function (stepToAdd) {
        var stepExist = this.tempSteps.filter(function (step) { return step.name === stepToAdd.name; }).length > 0;
        if (!stepExist) {
            this.logger.info("Adding step " + stepToAdd.name + " to the steps list.");
            this.tempSteps.push(stepToAdd);
        }
        else {
            var stepIndexToReplace = this.tempSteps.findIndex(function (step) { return step.name === stepToAdd.name; });
            this.tempSteps[stepIndexToReplace] = stepToAdd;
        }
    };
    JoyrideStepsContainerService.prototype.get = function (action) {
        if (action === StepActionType.NEXT)
            this.currentStepIndex++;
        else
            this.currentStepIndex--;
        if (this.currentStepIndex < 0 || this.currentStepIndex >= this.steps.length)
            throw new JoyrideStepOutOfRange('The first or last step of the tour cannot be found!');
        var stepName = this.getStepName(this.steps[this.currentStepIndex].id);
        var index = this.tempSteps.findIndex(function (step) { return step.name === stepName; });
        var stepFound = this.tempSteps[index];
        this.steps[this.currentStepIndex].step = stepFound;
        if (stepFound == null) {
            this.logger.warn("Step " + this.steps[this.currentStepIndex].id + " not found in the DOM. Check if it's hidden by *ngIf directive.");
        }
        return stepFound;
    };
    JoyrideStepsContainerService.prototype.getStepRoute = function (action) {
        var stepID;
        if (action === StepActionType.NEXT) {
            stepID = this.steps[this.currentStepIndex + 1] ? this.steps[this.currentStepIndex + 1].id : null;
        }
        else {
            stepID = this.steps[this.currentStepIndex - 1] ? this.steps[this.currentStepIndex - 1].id : null;
        }
        var stepRoute = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[1] : '';
        return stepRoute;
    };
    JoyrideStepsContainerService.prototype.updatePosition = function (stepName, position) {
        var index = this.getStepIndex(stepName);
        if (this.steps[index].step) {
            this.steps[index].step.position = position;
            this.stepHasBeenModified.next(this.steps[index].step);
        }
        else {
            this.logger.warn("Trying to modify the position of " + stepName + " to " + position + ". Step not found!Is this step located in a different route?");
        }
    };
    JoyrideStepsContainerService.prototype.getStepNumber = function (stepName) {
        return this.getStepIndex(stepName) + 1;
    };
    JoyrideStepsContainerService.prototype.getStepsCount = function () {
        var stepsOrder = this.stepOptions.getStepsOrder();
        return stepsOrder.length;
    };
    JoyrideStepsContainerService.prototype.getStepIndex = function (stepName) {
        var index = this.steps
            .map(function (step) { return (step.id.includes(ROUTE_SEPARATOR) ? step.id.split(ROUTE_SEPARATOR)[0] : step.id); })
            .findIndex(function (name) { return stepName === name; });
        if (index === -1)
            throw new JoyrideError("The step with name: " + stepName + " does not exist in the step list.");
        return index;
    };
    JoyrideStepsContainerService.prototype.getStepName = function (stepID) {
        var stepName = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[0] : stepID;
        return stepName;
    };
    JoyrideStepsContainerService.ctorParameters = function () { return [
        { type: JoyrideOptionsService },
        { type: LoggerService }
    ]; };
    JoyrideStepsContainerService = __decorate([
        Injectable()
    ], JoyrideStepsContainerService);
    return JoyrideStepsContainerService;
}());
export { JoyrideStepsContainerService };
//# sourceMappingURL=data:application/json;base64,