import { __decorate, __param } from "tslib";
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { JoyrideStepService } from './joyride-step.service';
import { JoyrideOptionsService } from './joyride-options.service';
import { of } from 'rxjs';
import { finalize } from 'rxjs/operators';
import { JoyrideStepInfo } from '../models/joyride-step-info.class';
import { isPlatformBrowser } from '@angular/common';
var JoyrideService = /** @class */ (function () {
    function JoyrideService(platformId, stepService, optionsService) {
        this.platformId = platformId;
        this.stepService = stepService;
        this.optionsService = optionsService;
        this.tourInProgress = false;
    }
    JoyrideService.prototype.startTour = function (options) {
        var _this = this;
        if (!isPlatformBrowser(this.platformId)) {
            return of(new JoyrideStepInfo());
        }
        if (!this.tourInProgress) {
            this.tourInProgress = true;
            if (options) {
                this.optionsService.setOptions(options);
            }
            this.tour$ = this.stepService.startTour().pipe(finalize(function () { return (_this.tourInProgress = false); }));
            this.tour$.subscribe();
        }
        return this.tour$;
    };
    JoyrideService.prototype.closeTour = function () {
        if (this.isTourInProgress())
            this.stepService.close();
    };
    JoyrideService.prototype.isTourInProgress = function () {
        return this.tourInProgress;
    };
    JoyrideService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: JoyrideStepService },
        { type: JoyrideOptionsService }
    ]; };
    JoyrideService = __decorate([
        Injectable(),
        __param(0, Inject(PLATFORM_ID))
    ], JoyrideService);
    return JoyrideService;
}());
export { JoyrideService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWpveXJpZGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvam95cmlkZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbEUsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3BEO0lBSUksd0JBQ2lDLFVBQWtCLEVBQzlCLFdBQStCLEVBQy9CLGNBQXFDO1FBRnpCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDOUIsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQy9CLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQU5sRCxtQkFBYyxHQUFZLEtBQUssQ0FBQztJQU9yQyxDQUFDO0lBRUosa0NBQVMsR0FBVCxVQUFVLE9BQXdCO1FBQWxDLGlCQWFDO1FBWkcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLGVBQWUsRUFBRSxDQUFDLENBQUM7U0FDcEM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN0QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztZQUMzQixJQUFJLE9BQU8sRUFBRTtnQkFDVCxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMzQztZQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQU0sT0FBQSxDQUFDLEtBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLEVBQTdCLENBQTZCLENBQUMsQ0FBQyxDQUFDO1lBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDMUI7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELGtDQUFTLEdBQVQ7UUFDSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUVELHlDQUFnQixHQUFoQjtRQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDOztnQkExQjRDLE1BQU0sdUJBQTlDLE1BQU0sU0FBQyxXQUFXO2dCQUNXLGtCQUFrQjtnQkFDZixxQkFBcUI7O0lBUGpELGNBQWM7UUFEMUIsVUFBVSxFQUFFO1FBTUosV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7T0FMZixjQUFjLENBZ0MxQjtJQUFELHFCQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0FoQ1ksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEpveXJpZGVTdGVwU2VydmljZSB9IGZyb20gJy4vam95cmlkZS1zdGVwLnNlcnZpY2UnO1xuaW1wb3J0IHsgSm95cmlkZU9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi9qb3lyaWRlLW9wdGlvbnMuc2VydmljZSc7XG5pbXBvcnQgeyBKb3lyaWRlT3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy9qb3lyaWRlLW9wdGlvbnMuY2xhc3MnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSm95cmlkZVN0ZXBJbmZvIH0gZnJvbSAnLi4vbW9kZWxzL2pveXJpZGUtc3RlcC1pbmZvLmNsYXNzJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEpveXJpZGVTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHRvdXJJblByb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSB0b3VyJDogT2JzZXJ2YWJsZTxKb3lyaWRlU3RlcEluZm8+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN0ZXBTZXJ2aWNlOiBKb3lyaWRlU3RlcFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uc1NlcnZpY2U6IEpveXJpZGVPcHRpb25zU2VydmljZVxuICAgICkge31cblxuICAgIHN0YXJ0VG91cihvcHRpb25zPzogSm95cmlkZU9wdGlvbnMpOiBPYnNlcnZhYmxlPEpveXJpZGVTdGVwSW5mbz4ge1xuICAgICAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvZihuZXcgSm95cmlkZVN0ZXBJbmZvKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy50b3VySW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgdGhpcy50b3VySW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1NlcnZpY2Uuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudG91ciQgPSB0aGlzLnN0ZXBTZXJ2aWNlLnN0YXJ0VG91cigpLnBpcGUoZmluYWxpemUoKCkgPT4gKHRoaXMudG91ckluUHJvZ3Jlc3MgPSBmYWxzZSkpKTtcbiAgICAgICAgICAgIHRoaXMudG91ciQuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG91ciQ7XG4gICAgfVxuXG4gICAgY2xvc2VUb3VyKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc1RvdXJJblByb2dyZXNzKCkpIHRoaXMuc3RlcFNlcnZpY2UuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBpc1RvdXJJblByb2dyZXNzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy50b3VySW5Qcm9ncmVzcztcbiAgICB9XG59XG4iXX0=