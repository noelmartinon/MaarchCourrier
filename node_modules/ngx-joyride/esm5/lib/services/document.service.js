import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { DomRefService } from './dom.service';
var DocumentService = /** @class */ (function () {
    function DocumentService(DOMService) {
        this.DOMService = DOMService;
        this.setDocumentHeight();
        if (!document.elementsFromPoint) {
            // IE 11 - Edge browsers
            document.elementsFromPoint = this.elementsFromPoint.bind(this);
        }
    }
    DocumentService.prototype.getElementFixedTop = function (elementRef) {
        return elementRef.nativeElement.getBoundingClientRect().top;
    };
    DocumentService.prototype.getElementFixedLeft = function (elementRef) {
        return elementRef.nativeElement.getBoundingClientRect().left;
    };
    DocumentService.prototype.getElementAbsoluteTop = function (elementRef) {
        var scrollOffsets = this.getScrollOffsets();
        return (elementRef.nativeElement.getBoundingClientRect().top +
            scrollOffsets.y);
    };
    DocumentService.prototype.getElementAbsoluteLeft = function (elementRef) {
        var scrollOffsets = this.getScrollOffsets();
        return (elementRef.nativeElement.getBoundingClientRect().left +
            scrollOffsets.x);
    };
    DocumentService.prototype.setDocumentHeight = function () {
        this.documentHeight = this.calculateDocumentHeight();
    };
    DocumentService.prototype.getDocumentHeight = function () {
        return this.documentHeight;
    };
    DocumentService.prototype.isParentScrollable = function (elementRef) {
        return (this.getFirstScrollableParent(elementRef.nativeElement) !==
            this.DOMService.getNativeDocument().body);
    };
    DocumentService.prototype.isElementBeyondOthers = function (elementRef, isElementFixed, keywordToDiscard) {
        var x1 = isElementFixed
            ? this.getElementFixedLeft(elementRef)
            : this.getElementAbsoluteLeft(elementRef);
        var y1 = isElementFixed
            ? this.getElementFixedTop(elementRef)
            : this.getElementAbsoluteTop(elementRef);
        var x2 = x1 + elementRef.nativeElement.getBoundingClientRect().width - 1;
        var y2 = y1 + elementRef.nativeElement.getBoundingClientRect().height - 1;
        var elements1 = this.DOMService.getNativeDocument().elementsFromPoint(x1, y1);
        var elements2 = this.DOMService.getNativeDocument().elementsFromPoint(x2, y2);
        if (elements1.length === 0 && elements2.length === 0)
            return 1;
        if (this.getFirstElementWithoutKeyword(elements1, keywordToDiscard) !==
            elementRef.nativeElement ||
            this.getFirstElementWithoutKeyword(elements2, keywordToDiscard) !==
                elementRef.nativeElement) {
            return 2;
        }
        return 3;
    };
    DocumentService.prototype.scrollIntoView = function (elementRef, isElementFixed) {
        var firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        var top = isElementFixed
            ? this.getElementFixedTop(elementRef)
            : this.getElementAbsoluteTop(elementRef);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, top - 150);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop = top - 150;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, top - 150);
        }
    };
    DocumentService.prototype.scrollToTheTop = function (elementRef) {
        var firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, 0);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop = 0;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, 0);
        }
    };
    DocumentService.prototype.scrollToTheBottom = function (elementRef) {
        var firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop =
                    firstScrollableParent.scrollHeight -
                        firstScrollableParent.clientHeight;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);
        }
    };
    DocumentService.prototype.getFirstScrollableParent = function (node) {
        var _this = this;
        var regex = /(auto|scroll|overlay)/;
        var style = function (node, prop) {
            return _this.DOMService.getNativeWindow()
                .getComputedStyle(node, null)
                .getPropertyValue(prop);
        };
        var scroll = function (node) {
            return regex.test(style(node, 'overflow') +
                style(node, 'overflow-y') +
                style(node, 'overflow-x'));
        };
        var scrollparent = function (node) {
            return !node || node === _this.DOMService.getNativeDocument().body
                ? _this.DOMService.getNativeDocument().body
                : scroll(node)
                    ? node
                    : scrollparent(node.parentNode);
        };
        return scrollparent(node);
    };
    DocumentService.prototype.calculateDocumentHeight = function () {
        var documentRef = this.DOMService.getNativeDocument();
        return Math.max(documentRef.body.scrollHeight, documentRef.documentElement.scrollHeight, documentRef.body.offsetHeight, documentRef.documentElement.offsetHeight, documentRef.body.clientHeight, documentRef.documentElement.clientHeight);
    };
    DocumentService.prototype.getScrollOffsets = function () {
        var winReference = this.DOMService.getNativeWindow();
        var docReference = this.DOMService.getNativeDocument();
        // This works for all browsers except IE versions 8 and before
        if (winReference.pageXOffset != null)
            return { x: winReference.pageXOffset, y: winReference.pageYOffset };
        // For IE (or any browser) in Standards mode
        if (docReference.compatMode == 'CSS1Compat')
            return {
                x: docReference.documentElement.scrollLeft,
                y: docReference.documentElement.scrollTop
            };
        // For browsers in Quirks mode
        return {
            x: docReference.body.scrollLeft,
            y: docReference.body.scrollTop
        };
    };
    DocumentService.prototype.elementsFromPoint = function (x, y) {
        var parents = [];
        var parent = void 0;
        do {
            var elem = this.DOMService.getNativeDocument().elementFromPoint(x, y);
            if (elem && parent !== elem) {
                parent = elem;
                parents.push(parent);
                parent.style.pointerEvents = 'none';
            }
            else {
                parent = false;
            }
        } while (parent);
        parents.forEach(function (parent) {
            return (parent.style.pointerEvents = 'all');
        });
        return parents;
    };
    DocumentService.prototype.getFirstElementWithoutKeyword = function (elements, keyword) {
        while (elements[0] &&
            elements[0].classList.toString().includes(keyword)) {
            elements.shift();
        }
        return elements[0];
    };
    DocumentService.ctorParameters = function () { return [
        { type: DomRefService }
    ]; };
    DocumentService = __decorate([
        Injectable()
    ], DocumentService);
    return DocumentService;
}());
export { DocumentService };
//# sourceMappingURL=data:application/json;base64,