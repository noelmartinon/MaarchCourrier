import { ParseResult } from './interfaces/parse-result';
import { ParseConfig } from './interfaces/parse-config';
import { UnparseConfig } from './interfaces/unparse-config';
import * as ɵngcc0 from '@angular/core';
export declare class Papa {
    _papa: any;
    /**
     * Parse CSV to an array
     */
    parse(csv: string | Blob, config?: ParseConfig): ParseResult;
    /**
     * Convert an array into CSV
     */
    unparse(data: any, config?: UnparseConfig): string;
    /**
     * Set the size in bytes of each file chunk.
     * Used when streaming files obtained from the DOM that
     * exist on the local computer. Default 10 MB.
     */
    setLocalChunkSize(value: number): void;
    /**
     * Set the size in bytes of each remote file chunk.
     * Used when streaming remote files. Default 5 MB.
     */
    setRemoteChunkSize(value: number): void;
    /**
     * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.
     */
    setDefaultDelimiter(value: string): void;
    /**
     * An array of characters that are not allowed as delimiters.
     */
    get badDelimiters(): any;
    /**
     * The true delimiter. Invisible. ASCII code 30.
     * Should be doing the job we strangely rely upon commas and tabs for.
     */
    get recordSeparator(): any;
    /**
     * Also sometimes used as a delimiting character. ASCII code 31.
     */
    get unitSeparator(): any;
    /**
     * Whether or not the browser supports HTML5 Web Workers.
     * If false, worker: true will have no effect.
     */
    get workersSupported(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Papa, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFwYS5kLnRzIiwic291cmNlcyI6WyJwYXBhLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VSZXN1bHQgfSBmcm9tICcuL2ludGVyZmFjZXMvcGFyc2UtcmVzdWx0JztcbmltcG9ydCB7IFBhcnNlQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BhcnNlLWNvbmZpZyc7XG5pbXBvcnQgeyBVbnBhcnNlQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3VucGFyc2UtY29uZmlnJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhcGEge1xuICAgIF9wYXBhOiBhbnk7XG4gICAgLyoqXG4gICAgICogUGFyc2UgQ1NWIHRvIGFuIGFycmF5XG4gICAgICovXG4gICAgcGFyc2UoY3N2OiBzdHJpbmcgfCBCbG9iLCBjb25maWc/OiBQYXJzZUNvbmZpZyk6IFBhcnNlUmVzdWx0O1xuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYW4gYXJyYXkgaW50byBDU1ZcbiAgICAgKi9cbiAgICB1bnBhcnNlKGRhdGE6IGFueSwgY29uZmlnPzogVW5wYXJzZUNvbmZpZyk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNpemUgaW4gYnl0ZXMgb2YgZWFjaCBmaWxlIGNodW5rLlxuICAgICAqIFVzZWQgd2hlbiBzdHJlYW1pbmcgZmlsZXMgb2J0YWluZWQgZnJvbSB0aGUgRE9NIHRoYXRcbiAgICAgKiBleGlzdCBvbiB0aGUgbG9jYWwgY29tcHV0ZXIuIERlZmF1bHQgMTAgTUIuXG4gICAgICovXG4gICAgc2V0TG9jYWxDaHVua1NpemUodmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzaXplIGluIGJ5dGVzIG9mIGVhY2ggcmVtb3RlIGZpbGUgY2h1bmsuXG4gICAgICogVXNlZCB3aGVuIHN0cmVhbWluZyByZW1vdGUgZmlsZXMuIERlZmF1bHQgNSBNQi5cbiAgICAgKi9cbiAgICBzZXRSZW1vdGVDaHVua1NpemUodmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBkZWxpbWl0ZXIgdXNlZCB3aGVuIGl0IGlzIGxlZnQgdW5zcGVjaWZpZWQgYW5kIGNhbm5vdCBiZSBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5LiBEZWZhdWx0IGlzIGNvbW1hLlxuICAgICAqL1xuICAgIHNldERlZmF1bHREZWxpbWl0ZXIodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgYWxsb3dlZCBhcyBkZWxpbWl0ZXJzLlxuICAgICAqL1xuICAgIGdldCBiYWREZWxpbWl0ZXJzKCk6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgdHJ1ZSBkZWxpbWl0ZXIuIEludmlzaWJsZS4gQVNDSUkgY29kZSAzMC5cbiAgICAgKiBTaG91bGQgYmUgZG9pbmcgdGhlIGpvYiB3ZSBzdHJhbmdlbHkgcmVseSB1cG9uIGNvbW1hcyBhbmQgdGFicyBmb3IuXG4gICAgICovXG4gICAgZ2V0IHJlY29yZFNlcGFyYXRvcigpOiBhbnk7XG4gICAgLyoqXG4gICAgICogQWxzbyBzb21ldGltZXMgdXNlZCBhcyBhIGRlbGltaXRpbmcgY2hhcmFjdGVyLiBBU0NJSSBjb2RlIDMxLlxuICAgICAqL1xuICAgIGdldCB1bml0U2VwYXJhdG9yKCk6IGFueTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgYnJvd3NlciBzdXBwb3J0cyBIVE1MNSBXZWIgV29ya2Vycy5cbiAgICAgKiBJZiBmYWxzZSwgd29ya2VyOiB0cnVlIHdpbGwgaGF2ZSBubyBlZmZlY3QuXG4gICAgICovXG4gICAgZ2V0IHdvcmtlcnNTdXBwb3J0ZWQoKTogYm9vbGVhbjtcbn1cbiJdfQ==